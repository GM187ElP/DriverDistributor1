@using ClosedXML.Excel
@using DocumentFormat.OpenXml.Bibliography
@using DriverDistributor.Data
@using System.Globalization
@using DriverDistributor.Entities
@using static DriverDistributor.Components.Pages.DriverDistributorReport

<MudButton Style="background:#1D6F42;text-align:center;color:white;" OnClick="@OnExportClick">Excel</MudButton>

<script>
    window.downloadFileFromStream = async (fileName, bytes, mimeType) => {
    const blob = new Blob([new Uint8Array(bytes)], { type: mimeType });
    const url = URL.createObjectURL(blob);
    const anchor = document.createElement("a");
    anchor.href = url;
    anchor.download = fileName ?? "file.xlsx";
    anchor.click();
    URL.revokeObjectURL(url);
    };
</script>

@code {
    [Inject] public IJSRuntime JS { get; set; } 


    [Parameter] public string FileName { get; set; } = string.Empty;
    [Parameter] public EventCallback ExportRequested { get; set; }

    private async Task OnExportClick()
    {
        if (ExportRequested.HasDelegate)
        {
            await ExportRequested.InvokeAsync(null);
        }
    }

    public (int lastRow, int lastColumn) SetData<T>(List<T> report, IXLWorksheet worksheet, int startHeaderRow, int? startColumn, int? startDataRow)
    {
        worksheet.RightToLeft = true;
        if (startDataRow == null) startDataRow = startHeaderRow + 1;
        if (startColumn == null) startColumn = 1;

        var reportInfo = GetPropertyInfo(typeof(T));

        var lastCol = SetTableHeader(startHeaderRow, startColumn.Value, reportInfo, worksheet);

        var lastRow = WriteTable(report, reportInfo, worksheet, startDataRow.Value, startColumn.Value);

        worksheet.Columns(startColumn.Value, lastCol).AdjustToContents();

        return (lastRow, lastCol);
    }

    public async Task Export(IXLWorkbook workbook)
    {
        var persianCalendar = new PersianCalendar();
        var now = DateTime.Now;
        var persianTime = $"{persianCalendar.GetYear(now)}{persianCalendar.GetMonth(now)}{persianCalendar.GetDayOfMonth(now)}{persianCalendar.GetHour(now)}{persianCalendar.GetMinute(now)}";

        using var stream = new MemoryStream();
        workbook.SaveAs(stream);

        var content = stream.ToArray();
        var fileName = $"{persianTime}_{FileName}.xlsx";
        var mime = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";

        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, content, mime);
    }

    private int WriteTable<T>(List<T> items, List<KeyValuePair<string, PropertyInfoAttribute?>> propInfos, IXLWorksheet worksheet, int startRow, int startCol)
    {
        int row = startRow;
        if (items != null)
        {
            foreach (var item in items)
            {
                int col = startCol;
                foreach (var propEntry in propInfos)
                {
                    var attr = propEntry.Value;
                    if (attr != null && attr.Include)
                    {
                        var value = typeof(T).GetProperty(propEntry.Key)?.GetValue(item);
                        var cell = worksheet.Cell(row, col);

                        if (value == null)
                            cell.Value = 0;
                        else if (value is int i)
                            cell.Value = i;
                        else if (value is long l)
                            cell.Value = l;
                        else if (value is double d)
                            cell.Value = d;
                        else if (value is float f)
                            cell.Value = f;
                        else if (value is decimal dec)
                            cell.Value = (double)dec;
                        else if (value is DateTime dt)
                        {
                            cell.Value = dt;
                            cell.Style.DateFormat.Format = "yyyy/MM/dd";
                        }
                        else
                            cell.Value = value.ToString();

                        if (attr.Type == ColumnType.Number)
                        {
                            cell.Style.NumberFormat.Format = "#,##0";
                            cell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                            cell.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        }
                        else
                        {
                            cell.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        }

                        col++;
                    }
                }
                row++;
            }
        }
        return row - 1;
    }

    private int SetTableHeader(int startRow, int startCol, List<KeyValuePair<string, PropertyInfoAttribute?>> propInfos, IXLWorksheet worksheet)
    {
        int col = startCol;
        foreach (var propEntry in propInfos)
        {
            var attr = propEntry.Value;
            var cell = worksheet.Cell(startRow, col);
            if (attr != null && attr.Include)
            {
                cell.Value = attr.DisplayName;
                cell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                cell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
                cell.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                cell.Style.Font.Bold = true;
                col++;
            }
        }
        return col - 1;
    }


    private List<KeyValuePair<string, PropertyInfoAttribute?>> GetPropertyInfo(Type type)
    {
        var properties = type.GetProperties();
        var propInfos = new List<KeyValuePair<string, PropertyInfoAttribute?>>();

        foreach (var prop in properties)
        {
            var attr = prop.GetCustomAttributes(typeof(PropertyInfoAttribute), inherit: true)
                           .FirstOrDefault() as PropertyInfoAttribute;

            propInfos.Add(new KeyValuePair<string, PropertyInfoAttribute?>(prop.Name, attr));
        }

        return propInfos.OrderBy(kvp => kvp.Value?.Index ?? int.MaxValue).ToList();
    }

    public class PropertyInfoAttribute : Attribute
    {
        public PropertyInfoAttribute(int index, string name, bool include, ColumnType columnType)
        {
            Index = index;
            DisplayName = name;
            Include = include;
            Type = columnType;
        }
        public int Index { get; set; }
        public string DisplayName { get; set; }
        public bool Include { get; set; }
        public ColumnType Type { get; set; }
    }

    public enum ColumnType
    {
        Number, Text, Boolean
    }
}


