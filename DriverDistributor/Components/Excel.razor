@using ClosedXML.Excel
@using DocumentFormat.OpenXml.Bibliography
@using DriverDistributor.Data
@using System.Globalization
@using DriverDistributor.Entities
@using static DriverDistributor.Components.Pages.DriverDistributorReport


<MudButton OnClick="ExportShipmentList" Style="background:#1D6F42;text-align:center;color:white;">Excel</MudButton>

<script>
    window.downloadFileFromStream = async (fileName, bytes, mimeType) => {
    const blob = new Blob([new Uint8Array(bytes)], { type: mimeType });
    const url = URL.createObjectURL(blob);
    const anchor = document.createElement("a");
    anchor.href = url;
    anchor.download = fileName ?? "file.xlsx";
    anchor.click();
    URL.revokeObjectURL(url);
    };
</script>

@code {
    [Inject] public IJSRuntime JS { get; set; }

    [Parameter] public string FileName { get; set; } = string.Empty;


    public (int lastRow, int lastColumn) SetData<T>(List<T> report, IXLWorksheet worksheet, int startHeaderRow, int? startColumn, int? startDataRow)
    {
        if (startDataRow == null) startDataRow = startHeaderRow + 1;
        if (startColumn == null) startColumn = 1;

        var reportInfo = GetPropertyInfo(typeof(T));

        var lastCol = SetTableHeader(startHeaderRow, startColumn.Value, reportInfo, worksheet);

        var lastRow = WriteTable(report, reportInfo, worksheet, startDataRow.Value, startColumn.Value);

        worksheet.Columns(startColumn.Value, lastCol).AdjustToContents();

        return (lastRow, lastCol);
    }

    public async Task Export(IXLWorkbook workbook)
    {
        var persianCalendar = new PersianCalendar();
        var now = DateTime.Now;
        var persianTime = $"{persianCalendar.GetYear(now)}{persianCalendar.GetMonth(now)}{persianCalendar.GetDayOfMonth(now)}{persianCalendar.GetHour(now)}{persianCalendar.GetMinute(now)}";

        using var stream = new MemoryStream();
        workbook.SaveAs(stream);

        var content = stream.ToArray();
        var fileName = $"{persianTime}_{FileName}.xlsx";
        var mime = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";

        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, content, mime);
    }

    int WriteTable<T>(List<T> items, List<KeyValuePair<string, PropertyInfoAttribute?>> propInfos, IXLWorksheet worksheet, int startRow, int startCol)
    {
        int row = startRow;
        foreach (var item in items)
        {
            int col = startCol;
            foreach (var propEntry in propInfos)
            {
                var attr = propEntry.Value;
                if (attr != null && attr.Include)
                {
                    var value = typeof(T).GetProperty(propEntry.Key)?.GetValue(item);
                    var cell = worksheet.Cell(row, col);

                    if (value == null)
                        cell.Value = string.Empty;
                    else if (value is int i)
                        cell.Value = i;
                    else if (value is long l)
                        cell.Value = l;
                    else if (value is double d)
                        cell.Value = d;
                    else if (value is float f)
                        cell.Value = f;
                    else if (value is decimal dec)
                        cell.Value = (double)dec;
                    else if (value is DateTime dt)
                    {
                        cell.Value = dt;
                        cell.Style.DateFormat.Format = "yyyy/MM/dd";
                    }
                    else
                        cell.Value = value.ToString();

                    if (attr.Type == ColumnType.Number)
                    {
                        cell.Style.NumberFormat.Format = "#,##0";
                        cell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                    }

                    col++;
                }
            }
            row++;
        }
        return row - 1; 
    }

    int SetTableHeader(int startRow, int startCol, List<KeyValuePair<string, PropertyInfoAttribute?>> propInfos, IXLWorksheet worksheet)
    {
        int col = startCol;
        foreach (var propEntry in propInfos)
        {
            var attr = propEntry.Value;
            var cell = worksheet.Cell(startRow, col);
            if (attr != null && attr.Include)
            {
                cell.Value = attr.DisplayName;
                cell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                cell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
                col++;
            }
        }
        return col - 1; 
    }


    List<KeyValuePair<string, PropertyInfoAttribute?>> GetPropertyInfo(Type type)
    {
        var properties = type.GetProperties();
        var propInfos = new List<KeyValuePair<string, PropertyInfoAttribute?>>();

        foreach (var prop in properties)
        {
            var attr = prop.GetCustomAttributes(typeof(PropertyInfoAttribute), inherit: true)
                           .FirstOrDefault() as PropertyInfoAttribute;

            propInfos.Add(new KeyValuePair<string, PropertyInfoAttribute?>(prop.Name, attr));
        }

        return propInfos.OrderBy(kvp => kvp.Value?.Index ?? int.MaxValue).ToList();
    }

    public class PropertyInfoAttribute : Attribute
    {
        public PropertyInfoAttribute(int index, string name, bool include, ColumnType columnType)
        {
            Index = index;
            DisplayName = name;
            Include = include;
            Type = columnType;
        }
        public int Index { get; set; }
        public string DisplayName { get; set; }
        public bool Include { get; set; }
        public ColumnType Type { get; set; }
    }

    public enum ColumnType
    {
        Number, Text, Boolean
    }
    //----------------------------------------------------------------------------------------
    // var worksheet = _workbook.AddWorksheet($"گزارش فردی {Name}");
    // worksheet.Cell(1, lastCol).Value = ".";
    // lastCol += SeparationDistance;
    // SetTableHeader(lastCol, report1Info, worksheet);
    // var report1Info = GetPropertyInfo(typeof(Report));

    public async Task ExportShipmentList()
    {
        using var workbook = new XLWorkbook();
        var worksheet = workbook.AddWorksheet("گزارش");
        worksheet.Cell(2, 2).Value = "تاریخ";
        worksheet.Cell(2, 3).Value = "روز";
        worksheet.Cell(2, 4).Value = "کد پرسنلی راننده";
        worksheet.Cell(2, 5).Value = "راننده";
        worksheet.Cell(2, 6).Value = "کد پرسنلی موزع";
        worksheet.Cell(2, 7).Value = "موزع";
        worksheet.Cell(2, 8).Value = "مسیر";
        worksheet.Cell(2, 9).Value = "انبار";
        worksheet.Cell(2, 10).Value = "تعداد فاکتور";
        worksheet.Cell(2, 11).Value = "ریال فاکتور";
        worksheet.Cell(2, 12).Value = "خروجی";
        worksheet.Cell(2, 13).Value = "تعداد فاکتور مرجوعی";
        worksheet.Cell(2, 14).Value = "ریال فاکتور مرجوعی";
        worksheet.Cell(2, 15).Value = "تعداد ف سرویس دوم";
        worksheet.Cell(2, 16).Value = "ریال ف سرویس دوم";
        worksheet.Cell(2, 17).Value = "تعداد ف سرویس سوم";
        worksheet.Cell(2, 18).Value = "ریال ف سرویس سوم";
        worksheet.Cell(2, 19).Value = "VIP";
        worksheet.Cell(2, 20).Value = "تعداد خلص ف";
        worksheet.Cell(2, 21).Value = "ریال خالص ف";


        var data =  Enumerable.Empty<Shipment>();
        //dbContext.Shipments.ToList();

        int row = 3;

        foreach (var item in data)
        {
            worksheet.Cell(row, 2).Value = item.ShipmentDatePersian;
            worksheet.Cell(row, 3).Value = item.Weekday;
            worksheet.Cell(row, 4).Value = item.DriverPersonnelCode;
            worksheet.Cell(row, 5).Value = item.DriverName;
            worksheet.Cell(row, 6).Value = item.DistributorPersonnelCode;
            worksheet.Cell(row, 7).Value = item.DistributorName;
            worksheet.Cell(row, 8).Value = item.RouteName;
            worksheet.Cell(row, 9).Value = item.WarehouseName;
            worksheet.Cell(row, 10).Value = item.InvoiceCount;
            worksheet.Cell(row, 11).Value = item.InvoiceAmount;
            worksheet.Cell(row, 12).Value = string.Join('-', item.ShipmentNumbers.Select(x => x.Number));
            worksheet.Cell(row, 13).Value = item.ReturnInvoiceCount;
            worksheet.Cell(row, 14).Value = item.ReturnInvoiceAmount;
            worksheet.Cell(row, 15).Value = item.SecondServiceInvoiceCount;
            worksheet.Cell(row, 16).Value = item.SecondServiceInvoiceAmount;
            worksheet.Cell(row, 17).Value = item.ThirdServiceInvoiceCount;
            worksheet.Cell(row, 18).Value = item.ThirdServiceInvoiceAmount;
            worksheet.Cell(row, 19).Value = item.HasVip;
            worksheet.Cell(row, 20).Value = item.NetInvoiceCount;
            worksheet.Cell(row, 21).Value = item.NetInvoiceAmount;

            row++;
        }


        using var stream = new MemoryStream();
        workbook.SaveAs(stream);
        var content = stream.ToArray();

        var fileName = $"Export_{DateTime.Now:yyyyMMddHHmmss}.xlsx";
        var mime = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, content, mime);
    }

    
}


