@page "/driver-distributor-report"

@using System.Globalization
@using ClosedXML.Excel
@using DriverDistributor.Data
@using DriverDistributor.Entities
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using static DriverDistributor.Components.Excel
@inject NavigationManager nm
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager nm
@inject IDbContextFactory<AppDbContext> dbContextFactory;
@attribute [Authorize(Roles = "Admin,LogisticManager,HR")]

<PageTitle>گزارش فردی</PageTitle>


<MudRTLProvider RightToLeft="true">
    <h3 class="mt-5">گزارش فردی</h3>

    @* <div style="display: flex; flex-direction: column; height: 100vh;"> *@
    <!-- Top toolbar -->


    <MudStack Class="mb-2" Style="align-items:center;">
        <MudStack Row="true" Class="mb-2" Style="align-items:center;">

            <Excel @ref="excel" FileName="گزارش راننده و موزع" ExportRequested="OnExportRequested" />

            <MudSelect T="string"
                       Value="_month"
                       ValueChanged="MonthChanged"
                       Dense="true"
                       FitContent="true"
                       Clearable="false">
                @foreach (var month in monthList)
                {
                    <MudSelectItem Value="@month">@month</MudSelectItem>
                }
            </MudSelect>

            <MudSelect value="@_selectedName"
            ValueChanged="SelectedNameChanged"
            T="string"
            Dense="true"
            FitContent="true"
            Clearable="true"                       >
                @foreach (var name in nameList)
                {
                    <MudSelectItem Value="name.name">@name.name</MudSelectItem>
                }
            </MudSelect>

            <MudButton StartIcon="@Icons.Material.Filled.Refresh"
            IconColor="Color.Primary"
            Size="Size.Small"
            @onclick="Refresh">
                آپدیت
            </MudButton>

            <MudToggleGroup T="bool?" SelectionMode="SelectionMode.SingleSelection" Value="_isDistributor" ValueChanged="IsDistributorChanged" Color="Color.Secondary" CheckMark FixedContent>
                <MudToggleItem T="bool?" Value="@(false)" Text="راننده" />
                <MudToggleItem T="bool?" Value="@(null)" Text="کلی" />
                <MudToggleItem T="bool?" Value="@(true)" Text="موزع" />
            </MudToggleGroup>

        </MudStack>
        <MudDataGrid @ref="_report1Data" T="Report"
        RowClassFunc="@(RowClassFunc<Report>)"
        Items="@(_selectedName == null ? null : reportByWarehouse)"
        Dense="true"
        Bordered="true"
        Hover="true"
        Striped="true"
        Style="flex: 1; overflow: auto;"
        ShowColumnOptions=false
        ReadOnly=true
        HeaderClass="table-header">

            <Columns>
                <PropertyColumn Property="x => x.Warehouse" Title="انبار" HeaderClass="table-header" CellClass="table-cell" Sortable="false" />
                <PropertyColumn Property="@(x => x.InvoiceCountFormatted)" Title="تعداد فاکتور" HeaderClass="table-header" CellClass="table-cell" Sortable="false" />
                <PropertyColumn Property="@(x => x.InvoiceAmountFormatted)" Title="ریال فاکتور" HeaderClass="table-header" CellClass="table-cell" Sortable="false" />
                <PropertyColumn Property="@(x => x.ReturnInvoiceCountFormatted)" Title="تعداد فاکتور مرجوعی" HeaderClass="table-header" CellClass="table-cell" Sortable="false" />
                <PropertyColumn Property="@(x => x.ReturnInvoiceAmountFormatted)" Title="ریال فاکتور مرجوعی" HeaderClass="table-header" CellClass="table-cell" Sortable="false" />
                <PropertyColumn Property="@(x => x.NetInvoiceCountFormatted)" Title="تعداد خالص" HeaderClass="table-header" CellClass="table-cell" Sortable="false" />
                <PropertyColumn Property="@(x => x.NetInvoiceAmountFormatted)" Title="ریال خالص" HeaderClass="table-header" CellClass="table-cell" Sortable="false" />
            </Columns>
        </MudDataGrid>

    </MudStack>

    <!-- Table container with scroll -->
    <div style="height: calc(100vh - 210px); overflow-y: auto;">
        <MudDataGrid @ref="_report2Data" T="Report2"
        RowClassFunc="@(RowClassFunc)"
        Items="@(_selectedName == null ? null : data)"
        Dense="true"
        Bordered="true"
        Hover="true"
        Striped="true"
        FixedHeader="true"
        Height="600px"
        Style="flex: 1; overflow: auto;"
        QuickFilter="@Filter"
        HeaderClass="table-header"
        Filterable=false>


            <ToolBarContent>
                <MudTextField Value="_searchString"
                T="string"
                Placeholder="جستجو"
                Adornment="Adornment.Start"
                Immediate="true"
                ValueChanged="OnSearchChanged"
                AdornmentIcon="@Icons.Material.Filled.Search"
                IconSize="Size.Medium"
                FullWidth=false
                Class="mt-0" />
            </ToolBarContent>

            <Columns>
                <PropertyColumn Property="x => x.Index" Title="ردیف" StickyRight="true" HeaderClass="table-header" CellClass="table-cell" />
                <PropertyColumn Property="x => x.PersianDate" Title="تاریخ" StickyRight="true" HeaderClass="table-header" CellClass="table-cell" />
                <PropertyColumn Property="x => x.PersianWeekday" Title="روز" HeaderClass="table-header" CellClass="table-cell" />
                <PropertyColumn Property="x => x.Duty" Title="ماهیت" HeaderClass="table-header" CellClass="table-cell" />
                <PropertyColumn Property="x => x.Route" Title="مسیر" HeaderClass="table-header" CellClass="table-cell" />
                <PropertyColumn Property="x => x.Warehouse" Title="انبار" HeaderClass="table-header" CellClass="table-cell" />
                <PropertyColumn Property="@(x => x.InvoiceCountFormatted)" Title="تعداد فاکتور" HeaderClass="table-header" CellClass="table-cell" />
                <PropertyColumn Property="@(x => x.InvoiceAmountFormatted)" Title="ریال فاکتور" HeaderClass="table-header" CellClass="table-cell" />
                <PropertyColumn Property="@(x => x.ReturnInvoiceCountFormatted)" Title="تعداد فاکتور مرجوعی" HeaderClass="table-header" CellClass="table-cell" />
                <PropertyColumn Property="@(x => x.ReturnInvoiceAmountFormatted)" Title="ریال فاکتور مرجوعی" HeaderClass="table-header" CellClass="table-cell" />
                <PropertyColumn Property="@(x => x.NetInvoiceCountFormatted)" Title="تعداد خالص" HeaderClass="table-header" CellClass="table-cell" />
                <PropertyColumn Property="@(x => x.NetInvoiceAmountFormatted)" Title="ریال خالص" HeaderClass="table-header" CellClass="table-cell" />
            </Columns>
        </MudDataGrid>
    </div>

</MudRTLProvider>

<style>
    .table-header {
    background-color: #1976d2 !important;
    color: white !important;
    text-align: center !important;
    vertical-align: middle !important;
    font-weight: bold !important;
    }

    .table-cell {
    padding: 2px 6px !important;
    font-size: 0.85rem;
    text-align: center;
    }
</style>


@code {
    //------------------------------------------------
    private MudDataGrid<Report2>? _report2Data;
    private Excel? excel;
    private MudDataGrid<Report>? _report1Data;
    List<Report>? report1ToExcel;
    List<Report2>? report2ToExcel;
    private PersianCalendar persianCalendar = new();
    private string? _selectedName;
    private string? _selectedMonth;
    private string _month = "فروردین";
    private readonly string[] monthList = { "کلی", "فروردین", "اردیبهشت", "خرداد", "تیر", "اَمرداد", "شهریور", "مهر", "آبان", "آذر", "دی", "بهمن", "اسفند" };
    private List<Driver> drivers = [];
    private List<Distributor> distributors = [];
    private bool? _isDistributor = null;
    private HashSet<(string? code, string name)> nameList = [];
    private HashSet<Report2> data = [];
    private MudDataGrid<ShipmentWithIndex>? table;
    List<Report> reportByWarehouse = [];


    private async Task SelectedNameChanged(string value)
    {
        _selectedName = value;
        await LoadProperData();
    }

    private async Task MonthChanged(string value)
    {
        _month = value;
        ChangeMonth();
        await LoadProperData();
    }

    private async Task IsDistributorChanged(bool? value=null)
    {
        _isDistributor = value;
        if (value == false)
            nameList = drivers.Select(d => (d.PersonnelCode, d.Name)).ToHashSet();
        else if (value == true)
            nameList = distributors.Select(d => (d.PersonnelCode, d.Name)).ToHashSet();
        else
        {
            nameList = new HashSet<(string? code, string name)>();
            nameList.UnionWith(drivers.Select(d => (d.PersonnelCode, d.Name)));
            nameList.UnionWith(distributors.Select(d => (d.PersonnelCode, d.Name)));
        }
        await LoadProperData();
        StateHasChanged();
    }

    private List<T> SafeFilteredItems<T>(MudDataGrid<T> grid)
    {
        if (grid == null)
            return new List<T>();

        try
        {
            return grid.FilteredItems?.ToList() ?? new List<T>();
        }
        catch
        {
            return new List<T>();
        }
    }

    private void PrepareExportData()
    {
        report1ToExcel = SafeFilteredItems(_report1Data!);
        report2ToExcel = SafeFilteredItems(_report2Data!);
    }


    private async Task LoadData(bool isRefresh = false)
    {
        var dbContext = await dbContextFactory.CreateDbContextAsync();
        SetMonth();
        drivers = await dbContext.Drivers.AsNoTracking().ToListAsync();
        distributors = await dbContext.Distributors.AsNoTracking().ToListAsync();
        if (!isRefresh)
            _isDistributor = null;

        StateHasChanged();
    }

    private async Task LoadProperData()
    {
        var dbContext = await dbContextFactory.CreateDbContextAsync();
        var query = dbContext.Shipments.AsNoTracking();

        if (_isDistributor == false)
            query = query.Where(x => x.DriverName == _selectedName && (_selectedMonth == "کلی" ? true : x.MonthName == _month));

        else if (_isDistributor == true)
            query = query.Where(x => x.DistributorName == _selectedName && (_selectedMonth == "کلی" ? true : x.MonthName == _month));
        else
            query = query.Where(x => (x.DriverName == _selectedName || x.DistributorName == _selectedName) && (_selectedMonth == "کلی" ? true : x.MonthName == _month));

        data = query.Select(x => new Report2
            {
                Id = x.Id,
                PersianDate = x.ShipmentDatePersian ?? string.Empty,
                PersianWeekday = x.Weekday ?? string.Empty,
                Duty = (string.IsNullOrWhiteSpace(x.DistributorName) && !x.IsException) ? "راننده_موزع" : (x.DriverName == _selectedName && !x.IsException ? "راننده" : (x.IsException ? "" : "موزع")),
                Route = x.RouteName ?? string.Empty,
                Warehouse = x.WarehouseName ?? string.Empty,
                InvoiceCount = (x.InvoiceCount ?? 0 + x.SecondServiceInvoiceCount ?? 0 + x.ThirdServiceInvoiceCount ?? 0),
                InvoiceAmount = (x.InvoiceAmount ?? 0 + x.SecondServiceInvoiceAmount ?? 0 + x.ThirdServiceInvoiceAmount ?? 0),
                ReturnInvoiceCount = x.ReturnInvoiceCount ?? null,
                ReturnInvoiceAmount = x.ReturnInvoiceAmount ?? null
            }).OrderBy(x => x.PersianDate).ToHashSet();

        foreach (var item in data)
        {
            if (item.InvoiceCount is 0) item.InvoiceCount = null;
            if (item.InvoiceAmount is 0) item.InvoiceAmount = null;
        }

        SetReport();
    }


    private void OnSearchChanged(string value)
    {
        _searchString = value;
        SetReport();
    }

    private void SetReport()
    {
        if (!string.IsNullOrWhiteSpace(_selectedName))
        {
            shipments = [];

            reportByWarehouse = data.Where(x => !string.IsNullOrWhiteSpace(x.Warehouse)).Where(Filter).GroupBy(x => x.Warehouse).Select(x => new Report
                {
                    Warehouse = x.Key!,
                    InvoiceCount = (x.Sum(i => i.InvoiceCount ?? 0)) switch { 0 => null, var sum => sum },
                    InvoiceAmount = (x.Sum(i => i.InvoiceAmount ?? 0)) switch { 0 => null, var sum => sum },
                    ReturnInvoiceCount = (x.Sum(i => i.ReturnInvoiceCount ?? 0)) switch { 0 => null, var sum => sum },
                    ReturnInvoiceAmount = (x.Sum(i => i.ReturnInvoiceAmount ?? 0)) switch { 0 => null, var sum => sum },
                }).OrderBy(x => x.Warehouse).ToList();
        }
    }


    private void SetMonth()
    {
        var num = persianCalendar.GetMonth(DateTime.Now);
        _month = monthList[num];
        _selectedMonth = num.ToString("00");
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadData();
        await IsDistributorChanged();

        StateHasChanged();
    }

    private List<ShipmentWithIndex>
        indexedShipments = [];

    private string RowClassFunc<T>
        (T element, int rowNumber)
    {
        var value = 1 + rowNumber + (table?.CurrentPage ?? 0) * (table?.RowsPerPage ?? 0);
        typeof(T).GetProperty("Index").SetValue(element, value);
        return string.Empty;
    }

    void ChangeMonth()
    {
        var num = Array.IndexOf(monthList, _month);
        _selectedMonth = num.ToString("00");
    }

    async Task Refresh() => await LoadData(true);
    //------------------------------------------------

    private string shipmentNumbers = string.Empty;
    private readonly Shipment shipment = new();
    private List<Shipment>
        shipments = [];
    private string _searchString;
    private List<int>
        Count
    { get; set; } = [];

    private Func<Report2, bool> Filter => s =>
        {
            bool matchesSearch = string.IsNullOrWhiteSpace(_searchString) ||
                        (s.PersianDate?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                        (s.PersianWeekday?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                        (s.Route?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                        (s.Duty?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                        (s.Warehouse?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                        s.InvoiceCount.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
                        s.InvoiceAmount.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
                        s.ReturnInvoiceCount.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
                        s.ReturnInvoiceAmount.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
                        s.NetInvoiceCount.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
                        s.NetInvoiceAmount.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase
                        );

            return matchesSearch;
        };


    private async Task OnExportRequested()
    {
        PrepareExportData();

        var workbook = new XLWorkbook();
        var worksheet = workbook.AddWorksheet("گزارش کلی");

        var rowCol = excel.SetData(report2ToExcel, worksheet, 1, 2, null);
        excel.SetData(report1ToExcel, worksheet, 1, rowCol.lastColumn + 2, null);

        await excel.Export(workbook);
    }

    public class Report
    {
        public string Name { get; set; }

        [PropertyInfo(1, "ردیف", true, ColumnType.Number)]
        public int Index { get; set; }

        [PropertyInfo(6, "انبار", true, ColumnType.Text)]
        public string Warehouse { get; set; } = string.Empty;

        [PropertyInfo(7, "تعداد فاکتور", true, ColumnType.Number)]
        public int? InvoiceCount { get; set; } = 0;

        [PropertyInfo(8, "ریال فاکتور", true, ColumnType.Number)]
        public long? InvoiceAmount { get; set; } = 0;

        [PropertyInfo(9, "تعداد فاکتور مرجوعی", true, ColumnType.Number)]
        public int? ReturnInvoiceCount { get; set; } = 0;

        [PropertyInfo(10, "ریال فاکتور مرجوعی", true, ColumnType.Number)]
        public long? ReturnInvoiceAmount { get; set; } = 0;

        [PropertyInfo(11, "تعداد خلص ف", true, ColumnType.Number)]
        public int NetInvoiceCount => (InvoiceCount ?? 0) - (ReturnInvoiceCount ?? 0);

        [PropertyInfo(12, "ریال خالص ف", true, ColumnType.Number)]
        public long NetInvoiceAmount => (InvoiceAmount ?? 0) - (ReturnInvoiceAmount ?? 0);

        [PropertyInfo(21, "-", false, ColumnType.Text)]
        public string InvoiceCountFormatted => InvoiceCount.HasValue ? InvoiceCount.Value.ToString("N0") : string.Empty;
        [PropertyInfo(21, "-", false, ColumnType.Text)]
        public string InvoiceAmountFormatted => InvoiceAmount.HasValue ? InvoiceAmount.Value.ToString("N0") : string.Empty;
        [PropertyInfo(21, "-", false, ColumnType.Text)]
        public string ReturnInvoiceCountFormatted => ReturnInvoiceCount.HasValue ? ReturnInvoiceCount.Value.ToString("N0") : string.Empty;
        [PropertyInfo(21, "-", false, ColumnType.Text)]
        public string ReturnInvoiceAmountFormatted => ReturnInvoiceAmount.HasValue ? ReturnInvoiceAmount.Value.ToString("N0") : string.Empty;
        [PropertyInfo(21, "-", false, ColumnType.Text)]
        public string NetInvoiceCountFormatted => NetInvoiceCount == 0 ? string.Empty : NetInvoiceCount.ToString("N0");
        [PropertyInfo(21, "-", false, ColumnType.Text)]
        public string NetInvoiceAmountFormatted => NetInvoiceAmount == 0 ? string.Empty : NetInvoiceAmount.ToString("N0");
    }

    public class Report2 : Report
    {
        [PropertyInfo(21, "آیدی", false, ColumnType.Number)]
        public long Id { get; set; }

        [PropertyInfo(2, "تاریخ", true, ColumnType.Text)]
        public string PersianDate { get; set; } = string.Empty;

        [PropertyInfo(3, "روز", true, ColumnType.Text)]
        public string PersianWeekday { get; set; } = string.Empty;

        [PropertyInfo(4, "ماهیت", true, ColumnType.Text)]
        public string Duty { get; set; } = string.Empty;

        [PropertyInfo(5, "مسیر", true, ColumnType.Text)]
        public string Route { get; set; } = string.Empty;
    }

}


