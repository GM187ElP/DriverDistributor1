@page "/add-driver-distributor"
@using System.ComponentModel
@using DriverDistributor.Entities
@using DriverDistributor.Services
@using Microsoft.AspNetCore.Authorization
@using MudBlazor
@attribute [Authorize]

<PageTitle>اضافه کردن راننده و موزع</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="page-center">
    <MudPaper Class="pa-6 form-card" Elevation="4">
        <div style="display:flex; justify-content:center; align-items:center; margin-bottom:16px;">
            <h2 class="mud-typography-h5 mb-0">اضافه کردن راننده و موزع</h2>
        </div>

        <MudForm @ref="form" Model="@model" @bind-IsValid="@success" @bind-Errors="@errors">

            <MudRadioGroup @bind-Value="IsDriver" Row="true" Class="mb-4">
                <MudRadio Value="@(true)" Color="Color.Primary">راننده</MudRadio>
                <MudRadio Value="@(false)" Color="Color.Secondary">موزع</MudRadio>
            </MudRadioGroup>

            <MudTextField Class="mb-3" @bind-Value="model.FirstName" Immediate="true"
                          Required="true" RequiredError="نام را وارد کنید"
                          Placeholder="نام" TextChanged="@(s=>OnFirstNameChanged(s))" />

            <MudTextField Class="mb-3" @bind-Value="model.LastName" Immediate="true"
                          Required="true" RequiredError="نام خانوادگی را وارد کنید"
                          Placeholder="نام خانوادگی" TextChanged="@(s=>OnLastNameChanged(s))" />

            <MudTextField Value="model.FullName"  ReadOnly="true"
                          Disabled="true" Validation="@(new Func<string, string>(Exists))" Class="mb-4" />

            <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true"
                       OnClick="@(async ()=>await Add(form))">
                ثبت
            </MudButton>
        </MudForm>
    </MudPaper>
</MudContainer>

<style>
    /* Center the container */
    .page-center {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh; /* full viewport height */
        margin: 0 auto;
    }

    /* Card styling */
    .form-card {
        width: 100%;
        max-width: 420px;
        padding: 30px;
        border-radius: 16px;
        box-shadow: 0 8px 24px rgba(0,0,0,0.15);
    }

    /* Reduce MudBlazor default spacing */
    .mud-form .mud-radio-group {
        margin-bottom: 16px !important;
    }

    .mud-form .mud-text-field {
        margin-bottom: 12px !important;
    }

    /* Optional: center radio buttons text */
    .mud-radio-group {
        justify-content: center;
    }

    /* Override Semantic/MudBlazor global spacing if needed */
    .mud-paper {
        margin: 0 !important;
    }
</style>

@code {
    [Inject] public DataServices services { get; set; }
    public bool IsDriver { get; set; } = true;

    bool success;
    string[] errors = { };
    private MudForm form;

    List<Driver> drivers = [];
    List<Distributor> distributors = [];

    private AddDriverDistributorDto model = new();

    public class AddDriverDistributorDto
    {
        private string _fullName = string.Empty;
        [Label("نام")]
        public string FirstName { get; set; } = string.Empty;
        [Label("نام خانوادگی")]
        public string LastName { get; set; } = string.Empty;
        [Label("نام و نام خانوادگی")]
        public string FullName { get; set; } = string.Empty;
    }

    private void OnFirstNameChanged(string value)
    {
        model.FirstName = value;
        model.FullName = $"{(model.FirstName ?? "").Trim()} {(model.LastName ?? "").Trim()}";
    }

    private void OnLastNameChanged(string value)
    {
        model.LastName = value;
        model.FullName = $"{(model.FirstName ?? "").Trim()} {(model.LastName ?? "").Trim()}";
    }

    private string Exists(string name)
    {
        if (IsDriver)
            drivers = services.Load(TableName.Driver) as List<Driver> ?? [];
        else
            distributors = services.Load(TableName.Distributor) as List<Distributor> ?? [];

        if (IsDriver && drivers.Any(x => x.Name == name))
            return "نام راننده وارد شده موجود است.";
        else if (!IsDriver && distributors.Any(x => x.Name == name))
            return "نام موزع وارد شده موجود است.";

        return null;
    }

    private async Task Add(MudForm form)
    {
        await form.Validate();

        if (success)
        {
            if (IsDriver)
                services.Add<Driver>(new Driver { Name = model.FullName });
            else
                services.Add<Distributor>(new Distributor { Name = model.FullName });

            model = new();
            await Task.Delay(1);

            StateHasChanged();
            await form.ResetAsync();
        }
    }
}
