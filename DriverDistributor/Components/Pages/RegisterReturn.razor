@page "/register-return/{Id:long=0}"
@using System.ComponentModel.DataAnnotations
@using DriverDistributor.Data
@using DriverDistributor.Entities
@using Microsoft.EntityFrameworkCore
@inject NavigationManager navigationManager
@inject IDbContextFactory<AppDbContext> dbContextFactory
@inject ISnackbar Snackbar

<PageTitle>ویرایش خروجی</PageTitle>

<h3>EditShipment</h3>

<MudRTLProvider RightToLeft="true">
    <MudForm @ref=form @bind-IsValid=success @bind-Errors=errors>
        <MudContainer>
            <MudGrid>
                <MudItem xs="4" sm="6" md="4">

                    <MudNumericField Class="mt-5" @bind-Value="InvoiceCount" Label="تعداد فاکتورها" Disabled=true ReadOnly=true Variant="Variant.Outlined" />
                    <MudNumericField Class="mt-5" @bind-Value="InvoiceAmount" Label="جمع ریال فاکتورها" Disabled=true ReadOnly=true Variant="Variant.Outlined" Format="N0" />
                </MudItem>

                <MudItem xs="12" sm="6" md="4">

                    <MudNumericField Class="mt-5" @bind-Value="ReturnInvoiceCount" Label="تعداد فاکتورهای مرجوعی" Variant="Variant.Outlined" Immediate=true Min="0" Max="shipment.InvoiceCount"
                    ErrorText="لطفا تعداد فاکتورها را وارد کنید" Required=@(ReturnInvoiceAmount>0) />

                    <MudNumericField Class="mt-5" @bind-Value="ReturnInvoiceAmount" Label="جمع ریال فاکتورهای مرجوعی" Variant="Variant.Outlined" Immediate=true Min="0" Max="shipment.InvoiceAmount"
                    ErrorText="لطفا جمع ریال فاکتورها را وارد کنید" Required=@(ReturnInvoiceCount>0) Format="N0" />
                </MudItem>

                <MudItem xs="12" sm="6" md="4">
                    <MudNumericField Class="mt-5" Value="NetInvoiceCount" Label="تعداد خالص" Disabled=true ReadOnly=true Variant="Variant.Outlined" />
                    <MudNumericField Class="mt-5" Value="NetInvoiceAmount" Label="ریال خالص" Disabled=true ReadOnly=true Variant="Variant.Outlined" Format="N0" />
                </MudItem>

                <MudStack Class="mt-5" Row=true AlignItems="AlignItems.Center" Justify="Justify.Center" Spacing="1">
                    <MudButton Variant="Variant.Filled" Color="Color.Error" Onclick="ClearForm"><MudText Typo="Typo.h6">پاک کردن</MudText></MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick=Cancel><MudText Typo="Typo.h6">انصراف</MudText></MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick=AddShipmentToList ButtonType=ButtonType.Submit><MudText Typo="Typo.h6">ذخیره</MudText></MudButton>
                </MudStack>
            </MudGrid>
        </MudContainer>
    </MudForm>
</MudRTLProvider>

<style>
    .same-height {
    height: 56px;
    }

    .item-template {
    font-size: 1.2rem;
    padding: 8px 16px;
    text-align: center;
    font-family: 'Iranian Sans', sans-serif;
    }

    .autocomplete-container, .autocomplete-container * {
    text-align: center;
    font-size: 1.2rem;
    font-family: 'Iranian Sans', sans-serif;
    }

    .align-center {
    display: flex;
    align-items: center;
    }
</style>

@code {
    [Parameter] public long Id { get; set; }
    private MudForm form;
    private Shipment shipment = new();
    private bool success = false;
    private string[] errors = [];

    private int? InvoiceCount { get; set; }
    private long? InvoiceAmount { get; set; }
    private int? ReturnInvoiceCount { get; set; }
    private long? ReturnInvoiceAmount { get; set; }

    public int? NetInvoiceCount => (InvoiceCount ?? 0) - (ReturnInvoiceCount ?? 0);
    public long? NetInvoiceAmount => (InvoiceAmount ?? 0) - (ReturnInvoiceAmount ?? 0);

    private async Task LoadShipment()
    {
        using var dbContext = dbContextFactory.CreateDbContext();
        shipment = await dbContext.Shipments.Include(x => x.ShipmentNumbers).FirstOrDefaultAsync(s => s.Id == Id) ?? new();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadShipment();

        InvoiceCount = (shipment.InvoiceCount ?? 0) + (shipment.SecondServiceInvoiceCount ?? 0) + (shipment.ThirdServiceInvoiceCount ?? 0);
        InvoiceAmount = (shipment.InvoiceAmount ?? 0) + (shipment.SecondServiceInvoiceAmount ?? 0) + (shipment.ThirdServiceInvoiceAmount ?? 0);
        ReturnInvoiceCount = shipment.ReturnInvoiceCount;
        ReturnInvoiceAmount = shipment.ReturnInvoiceAmount;
        StateHasChanged();
    }

    private void Cancel() => navigationManager.NavigateTo("/",true);

    private async Task ClearForm() => await OnInitializedAsync();

    private async Task AddShipmentToList()
    {
        if (form is not null)
            await form.Validate();

        if (!form!.IsValid)
            return;

        shipment.ReturnInvoiceCount = ReturnInvoiceCount == 0 ? null : ReturnInvoiceCount;
        shipment.ReturnInvoiceAmount = ReturnInvoiceAmount == 0 ? null : ReturnInvoiceAmount;

        var changedRowCount = 0;
        using (var dbContext = dbContextFactory.CreateDbContext())
        {
            dbContext.Entry(shipment).State = EntityState.Modified;
            changedRowCount = await dbContext.SaveChangesAsync();
        }

        if (changedRowCount > 0)
            navigationManager.NavigateTo("/",true);
    }
}