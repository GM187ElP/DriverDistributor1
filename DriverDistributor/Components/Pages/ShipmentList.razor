@page "/"
@using System.Globalization
@using ClosedXML.Excel
@using DriverDistributor.Data
@using DriverDistributor.Entities
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using static DriverDistributor.Components.PersianDatePicker
@using static DriverDistributor.Components.Excel
@inject NavigationManager nm
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager nm
@inject AppDbContext dbContext


<PageTitle>لیست حواله ها</PageTitle>



<h2 class="mt-2 mb-2">لیست حواله ها</h2>

<MudPaper Class="pa-2 mb-2" Outlined="true">

    <MudStack Row="true" Class="mb-2" Style="align-items:center;">

        <Excel @ref="excel" FileName="گزارش راننده و موزع" ExportRequested="OnExportRequested" />

        <MudSelect T="string"
                   @bind-Value="SelectedMonth"
                   Dense="true"
                   FitContent="true"
                   Clearable="false">
            @foreach (var month in monthList)
            {
                <MudSelectItem Value="@month">@month</MudSelectItem>
            }
        </MudSelect>

        <MudButton StartIcon="@Icons.Material.Filled.Refresh"
                   IconColor="Color.Primary"
                   Size="Size.Small"
                   @onclick="Refresh">
            آپدیت
        </MudButton>

        <MudToggleGroup T="bool?" SelectionMode="SelectionMode.SingleSelection" @bind-Value="IsGostaresh" Color="Color.Secondary" CheckMark FixedContent>
            <MudToggleItem T="bool?" Value="@(true)" Text="گسترش" />
            <MudToggleItem T="bool?" Value="@(null)" Text="همه انبارها" />
            <MudToggleItem T="bool?" Value="@(false)" Text="کوشش" />
        </MudToggleGroup>

        <MudStack Row=false>

            <PersianDatePicker For="() => Persian" @bind-Value="Persian" Label="تاریخ خروجی" />
            <MudButton OnClick="ClearDate">پاک کردن فیلتر</MudButton>
            <MudStack Spacing=2 Row=true AlignItems="AlignItems.Center" Justify="Justify.Center">
                @if (Persian.DisplayDate != string.Empty)
                {
                    <MudStack Spacing=2 Row=true AlignItems="AlignItems.Center" Justify="Justify.Center">
                        <MudText Color="Color.Info" Typo="Typo.h6">@($"{Persian.DayOfWeek},")</MudText>
                        <MudText Color="Color.Warning" Typo="Typo.h6">@($"{Persian.DayOfMonth}")</MudText>
                        <MudText Color="Color.Error" Typo="Typo.h6">@($"{Persian.MonthString}")</MudText>
                        <MudText Color="Color.Success" Typo="Typo.h6">@($"{Persian.Year}")</MudText>
                    </MudStack>
                }
            </MudStack>
        </MudStack>
    </MudStack>
</MudPaper>

<div style="height: calc(100vh - 350px); overflow-y: auto;">
    @*

        *@

    <MudDataGrid @ref="_mudDataGrid"
                 T="IndexedShipment"
                 Items="@indexedShipments"
                 Dense="true"
                 Bordered="true"
                 Hover="true"
                 RowClassFunc="@RowClassFunc"
                 Striped="true"
                 FixedHeader="true"
                 Height="600px"
                 Style="flex: 1; overflow: auto;"
                 QuickFilter="@Filter"
                 HeaderClass="table-header"
                 Filterable=true>

        <ToolBarContent>
            <MudTextField @bind-Value="_searchString"
                          Placeholder="جستجو"
                          Clearable=true
                          ClearIcon="@Icons.Material.Filled.Clear"
                          OnClearButtonClick="ClearDate"
                          Adornment="Adornment.Start"
                          Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          IconSize="Size.Medium"
                          FullWidth=false
                          Class="mt-0" />
        </ToolBarContent>

        <Columns >

            <PropertyColumn Property="x => x.Index" Title="ردیف" StickyRight="true" HeaderClass="table-header" CellClass="table-cell" />

            <TemplateColumn Title="ویرایش" Filterable="false" StickyRight="true" HeaderClass="table-header">
                <CellTemplate Context="row">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                   Color="Color.Primary"
                                   Size="Size.Small"
                                   Disabled="@( !isAuthorized)"
                                   OnClick="@(() => EditItem(row.Item))" />
                </CellTemplate>
            </TemplateColumn>

            <TemplateColumn Title="ثبت مرجوعی" Filterable="false" StickyRight="true" HeaderClass="table-header">
                <CellTemplate Context="row">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                   Color="Color.Primary"
                                   Size="Size.Small"
                                   Disabled="@(row.Item.IsException || !isAuthorized)"
                                   OnClick="@(() => RegisterReturn(row.Item))" />
                </CellTemplate>
            </TemplateColumn>

            <PropertyColumn Style="font-size:xx-small;"  CellStyle="font-size:xx-small;" Property="x => x.ShipmentDatePersian" Title="تاریخ" StickyRight="true" HeaderClass="table-header" CellClass="table-cell" />
            <PropertyColumn Property="x => x.Weekday" Title="روز" HeaderClass="table-header" CellClass="table-cell" />
            <PropertyColumn Property="x => x.DriverPersonnelCode" Title="کد پرسنلی راننده" HeaderClass="table-header" CellClass="table-cell" />
            <PropertyColumn Property="x => x.DriverName" Title="راننده" HeaderClass="table-header" CellClass="table-cell" />
            <PropertyColumn Property="x => x.DistributorPersonnelCode" Title="کد پرسنلی موزع" HeaderClass="table-header" CellClass="table-cell" />
            <PropertyColumn Property="x => x.DistributorName" Title="موزع" HeaderClass="table-header" CellClass="table-cell" />
            <PropertyColumn Property="x => x.RouteName" Title="مسیر" HeaderClass="table-header" CellClass="table-cell" />
            <PropertyColumn Property="x => x.WarehouseName" Title="انبار" HeaderClass="table-header" CellClass="table-cell" />
            <PropertyColumn Property="x => x.InvoiceCountFormatted" Title="تعداد فاکتور" HeaderClass="table-header" CellClass="table-cell" />
            <PropertyColumn Property="x => x.InvoiceAmountFormatted" Title="ریال فاکتور" HeaderClass="table-header" CellClass="table-cell" />
            <PropertyColumn Property="x => x.ShipmentNumbersString" Title="خروجی" HeaderClass="table-header" CellClass="table-cell" />
            <PropertyColumn Property="x => x.ReturnInvoiceCountFormatted" Title="تعداد فاکتور مرجوعی" HeaderClass="table-header" CellClass="table-cell" />
            <PropertyColumn Property="x => x.ReturnInvoiceAmountFormatted" Title="ریال فاکتور مرجوعی" HeaderClass="table-header" CellClass="table-cell" />
            <PropertyColumn Property="x => x.SecondServiceInvoiceCountFormatted" Title="تعداد ف سرویس دوم" HeaderClass="table-header" CellClass="table-cell" />
            <PropertyColumn Property="x => x.SecondServiceInvoiceAmountFormatted" Title="ریال ف سرویس دوم" HeaderClass="table-header" CellClass="table-cell" />
            <PropertyColumn Property="x => x.ThirdServiceInvoiceCountFormatted" Title="تعداد ف سرویس سوم" HeaderClass="table-header" CellClass="table-cell" />
            <PropertyColumn Property="x => x.ThirdServiceInvoiceAmountFormatted" Title="ریال ف سرویس سوم" HeaderClass="table-header" CellClass="table-cell" />
            <PropertyColumn Property="x => x.HasVipFormatted" Title="VIP" HeaderClass="table-header" CellClass="table-cell" />
            <PropertyColumn Property="x => x.NetInvoiceCountFormatted" Title="تعداد خالص ف" HeaderClass="table-header" CellClass="table-cell" />
            <PropertyColumn Property="x => x.NetInvoiceAmountFormatted" Title="ریال خالص ف" HeaderClass="table-header" CellClass="table-cell" />
        </Columns>
    </MudDataGrid>


</div>

<style>
    .table-header {
        background-color: #1976d2 !important;
        color: white !important;
        text-align: center !important padding: 4px !important;
        vertical-align: middle !important;
        font-weight: bold !important;
    }

    .table-cell {
        padding: 2px 6px !important;
        font-size: 0.85rem;
        text-align: center;
    }
</style>


@code {
    private PersianCalendarClass _persian = new(DateTime.Today.AddDays(0), isEmptyAtStart: true);
    private MudDataGrid<IndexedShipment> _mudDataGrid;
    private readonly string[] monthList = { "کلی", "فروردین", "اردیبهشت", "خرداد", "تیر", "اَمرداد", "شهریور", "مهر", "آبان", "آذر", "دی", "بهمن", "اسفند" };
    private string? _selectedMonth = "کلی";
    private bool isAuthorized;
    private List<IndexedShipment> indexedShipments = [];
    private bool? _isGostaresh = null;
    private string? _distributionCenter = null;
    private string _searchString;
    private List<IndexedShipment> reportToExcel;
    private Excel excel;

    private PersianCalendarClass Persian
    {
        get => _persian;
        set
        {
            _persian = value;
            _searchString = value.DisplayDate;
            indexedShipments.Where(Filter);
        }
    }

    private bool? IsGostaresh
    {
        get => _isGostaresh;
        set
        {
            _isGostaresh = value;
            _distributionCenter = value switch
            {
                true => "گسترش",
                false => "کوشش",
                null => null
            };
            LoadData();
        }
    }

    void ClearDate()
    {
        if (Persian.DisplayDate != null)
            Persian.DisplayDate = string.Empty;

        _searchString = string.Empty;
        SetMonth();
        IsGostaresh = null;
    }

    public class IndexedShipment
    {
        [PropertyInfo(1, "ردیف", true, ColumnType.Number)]
        public long Index { get; set; }

        [PropertyInfo(2, "آیدی", false, ColumnType.Number)]
        public long Id { get; set; }

        [PropertyInfo(3, "تاریخ", true, ColumnType.Text)]
        public string MonthName { get; set; }

        [PropertyInfo(4, "تاریخ", true, ColumnType.Text)]
        public string ShipmentDatePersian { get; set; }

        [PropertyInfo(5, "روز", true, ColumnType.Text)]
        public string Weekday { get; set; }

        [PropertyInfo(6, "کد پرسنلی راننده", true, ColumnType.Number)]
        public int? DriverPersonnelCode { get; set; }

        [PropertyInfo(7, "راننده", true, ColumnType.Text)]
        public string? DriverName { get; set; }

        [PropertyInfo(8, "ماهیت راننده", true, ColumnType.Text)]
        public string? DriverDuty { get; set; } = null;

        [PropertyInfo(9, "کد پرسنلی موزع", true, ColumnType.Number)]
        public int? DistributorPersonnelCode { get; set; }

        [PropertyInfo(10, "موزع", true, ColumnType.Text)]
        public string? DistributorName { get; set; }

        [PropertyInfo(11, "ماهیت موزع", true, ColumnType.Text)]
        public string? DistributorDuty { get; set; } = null;

        [PropertyInfo(12, "مسیر", true, ColumnType.Text)]
        public string RouteName { get; set; }

        [PropertyInfo(13, "انبار", true, ColumnType.Text)]
        public string? WarehouseName { get; set; }

        [PropertyInfo(14, "تعداد فاکتور", true, ColumnType.Number)]
        public int? InvoiceCount { get; set; }

        [PropertyInfo(15, "ریال فاکتور", true, ColumnType.Number)]
        public long? InvoiceAmount { get; set; }

        [PropertyInfo(16, "خروجی", true, ColumnType.Text)]
        public string? ShipmentNumbersString { get; set; }

        [PropertyInfo(17, "تعداد فاکتور مرجوعی", true, ColumnType.Number)]
        public int? ReturnInvoiceCount { get; set; }

        [PropertyInfo(18, "ریال فاکتور مرجوعی", true, ColumnType.Number)]
        public long? ReturnInvoiceAmount { get; set; }

        [PropertyInfo(19, "تعداد ف سرویس دوم", true, ColumnType.Number)]
        public int? SecondServiceInvoiceCount { get; set; }

        [PropertyInfo(20, "ریال ف سرویس دوم", true, ColumnType.Number)]
        public long? SecondServiceInvoiceAmount { get; set; }

        [PropertyInfo(21, "تعداد ف سرویس سوم", true, ColumnType.Number)]
        public int? ThirdServiceInvoiceCount { get; set; }

        [PropertyInfo(22, "ریال ف سرویس سوم", true, ColumnType.Number)]
        public long? ThirdServiceInvoiceAmount { get; set; }

        [PropertyInfo(23, "VIP", true, ColumnType.Boolean)]
        public string? HasVipFormatted => HasVip ? "دارد" : null;

        [PropertyInfo(24, "تعداد خلص ف", true, ColumnType.Number)]
        public int? NetInvoiceCount => !IsException ? (InvoiceCount ?? 0) + (SecondServiceInvoiceCount ?? 0) + (ThirdServiceInvoiceCount ?? 0) - (ReturnInvoiceCount ?? 0) : null;

        [PropertyInfo(25, "ریال خالص ف", true, ColumnType.Number)]
        public long? NetInvoiceAmount => !IsException ? (InvoiceAmount ?? 0) + (SecondServiceInvoiceAmount ?? 0) + (ThirdServiceInvoiceAmount ?? 0) - (ReturnInvoiceAmount ?? 0) : null;

        [PropertyInfo(26, "نام کاربر", true, ColumnType.Text)]
        public string UserName { get; set; }

        [PropertyInfo(100, "-", false, ColumnType.Boolean)]
        public bool IsException { get; set; } = false;

        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string InvoiceCountFormatted => InvoiceCount.HasValue ? InvoiceCount.Value.ToString("N0") : string.Empty;
        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string InvoiceAmountFormatted => InvoiceAmount.HasValue ? InvoiceAmount.Value.ToString("N0") : string.Empty;
        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string ReturnInvoiceCountFormatted => ReturnInvoiceCount.HasValue ? ReturnInvoiceCount.Value.ToString("N0") : string.Empty;
        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string ReturnInvoiceAmountFormatted => ReturnInvoiceAmount.HasValue ? ReturnInvoiceAmount.Value.ToString("N0") : string.Empty;
        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string SecondServiceInvoiceCountFormatted => SecondServiceInvoiceCount.HasValue ? SecondServiceInvoiceCount.Value.ToString("N0") : string.Empty;
        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string ThirdServiceInvoiceCountFormatted => ThirdServiceInvoiceCount.HasValue ? ThirdServiceInvoiceCount.Value.ToString("N0") : string.Empty;
        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string SecondServiceInvoiceAmountFormatted => SecondServiceInvoiceAmount.HasValue ? SecondServiceInvoiceAmount.Value.ToString("N0") : string.Empty;
        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string ThirdServiceInvoiceAmountFormatted => ThirdServiceInvoiceAmount.HasValue ? ThirdServiceInvoiceAmount.Value.ToString("N0") : string.Empty;
        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string NetInvoiceCountFormatted => NetInvoiceCount.HasValue ? NetInvoiceCount.Value.ToString("N0") : string.Empty;
        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string NetInvoiceAmountFormatted => NetInvoiceAmount.HasValue ? NetInvoiceAmount.Value.ToString("N0") : string.Empty;

        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public bool HasVip { get; set; } = false;
        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string? IsExceptionFormatted => IsException ? "حالت خاص" : null;
        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string? DistributionCenter { get; set; }
    }

    private List<T> SafeFilteredItems<T>(MudDataGrid<T> grid)
    {
        if (grid == null)
            return new List<T>();

        try
        {
            return grid.FilteredItems?.ToList() ?? new List<T>();
        }
        catch
        {
            return new List<T>();
        }
    }

    private async Task PrepareExportData()
    {
        reportToExcel = SafeFilteredItems(_mudDataGrid);
    }

    void SetMonth()
    {
        PersianCalendar persianCalendar = new();
        var num = persianCalendar.GetMonth(DateTime.Now);
        _selectedMonth = monthList[num];
    }

    public string SelectedMonth
    {
        get => _selectedMonth;
        set
        {
            _selectedMonth = value;
            LoadData();
        }
    }

    void Refresh() => LoadData();

    protected override async Task OnInitializedAsync()
    {
        SetMonth();
        Persian = new(DateTime.Today.AddDays(0), isEmptyAtStart: true);
        await base.OnInitializedAsync();
        LoadData();

        var authState = await authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        isAuthorized = user.Identity?.IsAuthenticated ?? false;
        StateHasChanged();
    }


    private string RowClassFunc(IndexedShipment element, int rowNumber)
    {
        element.Index = 1 + rowNumber + (_mudDataGrid?.CurrentPage ?? 0) * (_mudDataGrid?.RowsPerPage ?? 0);
        return string.Empty;
    }

    void LoadData()
    {
        var query = dbContext.Shipments.Include(x => x.ShipmentNumbers).AsNoTracking();

        if (_selectedMonth != "کلی")
            query = query.Where(x => x.MonthName == _selectedMonth);

        if (_distributionCenter != null)
            query = query.Where(x => (x.DistributionCenter == _distributionCenter || x.DistributionCenter == null));

        var shipments = query.ToList();

        indexedShipments = [];
        foreach (var shipment in shipments)
        {
            IndexedShipment indexedShipment = new();
            var numbers = shipment.ShipmentNumbers.Select(x => x.Number);
            Services.Mapper.MapToDto(shipment, indexedShipment);
            indexedShipment.ShipmentNumbersString = string.Join('-', numbers) ?? null;
            indexedShipments.Add(indexedShipment);
        }
        StateHasChanged();
    }

    private Func<IndexedShipment, bool> Filter => s =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        var search = _searchString.Trim();

        bool ContainsIgnoreCase(string? source) => source?.Contains(search, StringComparison.OrdinalIgnoreCase) ?? false;

        bool matchesSearch =
        (s.ShipmentDatePersian?.Contains(search, StringComparison.OrdinalIgnoreCase) ?? false) ||
        (s.Weekday?.Contains(search, StringComparison.OrdinalIgnoreCase) ?? false) ||
        (s.MonthName?.Contains(search, StringComparison.OrdinalIgnoreCase) ?? false) ||

        (s.DriverPersonnelCode?.ToString().Contains(search, StringComparison.OrdinalIgnoreCase) ?? false) ||
        (s.DistributorPersonnelCode?.ToString().Contains(search, StringComparison.OrdinalIgnoreCase) ?? false) ||

        (s.DriverName?.Contains(search, StringComparison.OrdinalIgnoreCase) ?? false) ||
        (s.DriverDuty?.Contains(search, StringComparison.OrdinalIgnoreCase) ?? false) ||

        (s.DistributorName?.Contains(search, StringComparison.OrdinalIgnoreCase) ?? false) ||
        (s.DistributorDuty?.Contains(search, StringComparison.OrdinalIgnoreCase) ?? false) ||

        (s.RouteName?.Contains(search, StringComparison.OrdinalIgnoreCase) ?? false) ||
        (s.WarehouseName?.Contains(search, StringComparison.OrdinalIgnoreCase) ?? false) ||

        (s.InvoiceCount?.ToString().Contains(search, StringComparison.OrdinalIgnoreCase) ?? false) ||
        (s.InvoiceAmount?.ToString().Contains(search, StringComparison.OrdinalIgnoreCase) ?? false) ||

        (s.ReturnInvoiceCount?.ToString().Contains(search, StringComparison.OrdinalIgnoreCase) ?? false) ||
        (s.ReturnInvoiceAmount?.ToString().Contains(search, StringComparison.OrdinalIgnoreCase) ?? false) ||

        (s.SecondServiceInvoiceCount?.ToString().Contains(search, StringComparison.OrdinalIgnoreCase) ?? false) ||
        (s.SecondServiceInvoiceAmount?.ToString().Contains(search, StringComparison.OrdinalIgnoreCase) ?? false) ||

        (s.ThirdServiceInvoiceCount?.ToString().Contains(search, StringComparison.OrdinalIgnoreCase) ?? false) ||
        (s.ThirdServiceInvoiceAmount?.ToString().Contains(search, StringComparison.OrdinalIgnoreCase) ?? false) ||

        (s.HasVipFormatted?.Contains(search, StringComparison.OrdinalIgnoreCase) ?? false) ||
        (s.IsExceptionFormatted?.Contains(search, StringComparison.OrdinalIgnoreCase) ?? false) ||
        (s.DistributionCenter?.Contains(search, StringComparison.OrdinalIgnoreCase) ?? false) ||

        (s.NetInvoiceCount?.ToString().Contains(search, StringComparison.OrdinalIgnoreCase) ?? false) ||
        (s.NetInvoiceAmount?.ToString().Contains(search, StringComparison.OrdinalIgnoreCase) ?? false) ||

        (s.UserName?.Contains(search, StringComparison.OrdinalIgnoreCase) ?? false) ||

        (s.InvoiceCountFormatted?.Contains(search, StringComparison.OrdinalIgnoreCase) ?? false) ||
        (s.InvoiceAmountFormatted?.Contains(search, StringComparison.OrdinalIgnoreCase) ?? false) ||
        (s.ReturnInvoiceCountFormatted?.Contains(search, StringComparison.OrdinalIgnoreCase) ?? false) ||
        (s.ReturnInvoiceAmountFormatted?.Contains(search, StringComparison.OrdinalIgnoreCase) ?? false) ||
        (s.SecondServiceInvoiceCountFormatted?.Contains(search, StringComparison.OrdinalIgnoreCase) ?? false) ||
        (s.SecondServiceInvoiceAmountFormatted?.Contains(search, StringComparison.OrdinalIgnoreCase) ?? false) ||
        (s.ThirdServiceInvoiceCountFormatted?.Contains(search, StringComparison.OrdinalIgnoreCase) ?? false) ||
        (s.ThirdServiceInvoiceAmountFormatted?.Contains(search, StringComparison.OrdinalIgnoreCase) ?? false) ||
        (s.NetInvoiceCountFormatted?.Contains(search, StringComparison.OrdinalIgnoreCase) ?? false) ||
        (s.NetInvoiceAmountFormatted?.Contains(search, StringComparison.OrdinalIgnoreCase) ?? false);

        bool filterByDate = true;
        if (!string.IsNullOrEmpty(Persian?.DisplayDate))
            filterByDate = s.ShipmentDatePersian == Persian.DisplayDate;

        return matchesSearch && filterByDate;
    };

    void EditItem(IndexedShipment row)
    {
        nm.NavigateTo($"/edit-shipment/{row.Id}");
    }

    void RegisterReturn(IndexedShipment row)
    {
        nm.NavigateTo($"/register-return/{row.Id}");
    }

    private async Task OnExportRequested()
    {
        await PrepareExportData();

        var workbook = new XLWorkbook();
        var worksheet = workbook.AddWorksheet("گزارش کلی");

        var columnsdsfs = excel.SetData(reportToExcel, worksheet, 1, 2, null);

        await excel.Export(workbook);
    }
}



