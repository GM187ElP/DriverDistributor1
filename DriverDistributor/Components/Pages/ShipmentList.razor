@page "/"
@using System.Globalization
@using DriverDistributor.Data
@using DriverDistributor.Entities
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using static DriverDistributor.Components.Excel
@inject NavigationManager nm
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager nm
@inject AppDbContext dbContext


<PageTitle>لیست حواله ها</PageTitle>


<MudRTLProvider RightToLeft="true">

    <h3 class="mt-5">لیست حواله ها</h3>

    @* <div style="display: flex; flex-direction: column; height: 100vh;"> *@
    <!-- Top toolbar -->
    <MudStack Row="true" Class="mb-2" Style="align-items:center;">

        <Excel FileName="گزارش راننده و موزع" />


        <MudSelect T="string"
                   @bind-Value="Month"
                   Dense="true"
                   FitContent="true"
                   Clearable="false">
            @foreach (var month in monthList)
            {
                <MudSelectItem Value="@month">@month</MudSelectItem>
            }
        </MudSelect>

        <MudButton StartIcon="@Icons.Material.Filled.Refresh"
                   IconColor="Color.Primary"
                   Size="Size.Small"
                   @onclick="Refresh">
            آپدیت
        </MudButton>
    </MudStack>

    <!-- Table container with scroll -->
    <div style="height: calc(100vh - 210px); overflow-y: auto;">
        <MudDataGrid @ref="_mudDataGrid" T="IndexedShipment"
                     RowClassFunc="@RowClassFunc"
                     Items="@indexedShipments"
                     Dense="true"
                     Bordered="true"
                     Hover="true"
                     Striped="true"
                     FixedHeader="true"
                     Height="600px"
                     Style="flex: 1; overflow: auto;"
                     QuickFilter="@Filter"
                     HeaderClass="table-header"
                     Filterable=true>


            <ToolBarContent>
                <MudTextField @bind-Value="_searchString"
                              Placeholder="جستجو"
                              Adornment="Adornment.Start"
                              Immediate="true"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              IconSize="Size.Medium"
                              FullWidth=false
                              Class="mt-0" />
            </ToolBarContent>

            <Columns>
                <PropertyColumn Property="x => x.Index" Title="ردیف" StickyRight="true" HeaderClass="table-header" CellClass="table-cell" />

                <TemplateColumn Title="ویرایش" Filterable="false" StickyRight="true" HeaderClass="table-header">
                    <CellTemplate Context="row">
                        <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                       Color="Color.Primary"
                                       Size="Size.Small"
                                       Disabled="@( !isAuthorized)"
                                       OnClick="@(() => EditItem(row.Item))" />
                    </CellTemplate>
                </TemplateColumn>

                <TemplateColumn Title="ثبت مرجوعی" Filterable="false" StickyRight="true" HeaderClass="table-header">
                    <CellTemplate Context="row">
                        <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                       Color="Color.Primary"
                                       Size="Size.Small"
                                       Disabled="@(row.Item.IsException || !isAuthorized)"
                                       OnClick="@(() => RegisterReturn(row.Item))" />
                    </CellTemplate>
                </TemplateColumn>

                <PropertyColumn Property="x => x.ShipmentDatePersian" Title="تاریخ" StickyRight="true" HeaderClass="table-header" CellClass="table-cell" />
                <PropertyColumn Property="x => x.Weekday" Title="روز" HeaderClass="table-header" CellClass="table-cell" />
                <PropertyColumn Property="x => x.DriverPersonnelCode" Title="کد پرسنلی راننده" HeaderClass="table-header" CellClass="table-cell" />
                <PropertyColumn Property="x => x.DriverName" Title="راننده" HeaderClass="table-header" CellClass="table-cell" />
                <PropertyColumn Property="x => x.DistributorPersonnelCode" Title="کد پرسنلی موزع" HeaderClass="table-header" CellClass="table-cell" />
                <PropertyColumn Property="x => x.DistributorName" Title="موزع" HeaderClass="table-header" CellClass="table-cell" />
                <PropertyColumn Property="x => x.RouteName" Title="مسیر" HeaderClass="table-header" CellClass="table-cell" />
                <PropertyColumn Property="x => x.WarehouseName" Title="انبار" HeaderClass="table-header" CellClass="table-cell" />
                <PropertyColumn Property="x => x.InvoiceCountFormatted" Title="تعداد فاکتور" HeaderClass="table-header" CellClass="table-cell" />
                <PropertyColumn Property="x => x.InvoiceAmountFormatted" Title="ریال فاکتور" HeaderClass="table-header" CellClass="table-cell" />
                <PropertyColumn Property="x => x.ShipmentNumbers" Title="خروجی" HeaderClass="table-header" CellClass="table-cell" />
                <PropertyColumn Property="x => x.ReturnInvoiceCountFormatted" Title="تعداد فاکتور مرجوعی" HeaderClass="table-header" CellClass="table-cell" />
                <PropertyColumn Property="x => x.ReturnInvoiceAmountFormatted" Title="ریال فاکتور مرجوعی" HeaderClass="table-header" CellClass="table-cell" />
                <PropertyColumn Property="x => x.SecondServiceInvoiceCountFormatted" Title="تعداد ف سرویس دوم" HeaderClass="table-header" CellClass="table-cell" />
                <PropertyColumn Property="x => x.SecondServiceInvoiceAmountFormatted" Title="ریال ف سرویس دوم" HeaderClass="table-header" CellClass="table-cell" />
                <PropertyColumn Property="x => x.ThirdServiceInvoiceCountFormatted" Title="تعداد ف سرویس سوم" HeaderClass="table-header" CellClass="table-cell" />
                <PropertyColumn Property="x => x.ThirdServiceInvoiceAmountFormatted" Title="ریال ف سرویس سوم" HeaderClass="table-header" CellClass="table-cell" />
                <PropertyColumn Property="x => x.HasVip" Title="VIP" HeaderClass="table-header" CellClass="table-cell" />
                <PropertyColumn Property="x => x.NetInvoiceCountFormatted" Title="تعداد خالص ف" HeaderClass="table-header" CellClass="table-cell" />
                <PropertyColumn Property="x => x.NetInvoiceAmountFormatted" Title="ریال خالص ف" HeaderClass="table-header" CellClass="table-cell" />
            </Columns>
        </MudDataGrid>
    </div>
</MudRTLProvider>

<style>
    .table-header {
        background-color: #1976d2 !important;
        color: white !important;
        text-align: center !important padding: 4px !important;
        vertical-align: middle !important;
        font-weight: bold !important;
    }

    .table-cell {
        padding: 2px 6px !important;
        font-size: 0.85rem;
        text-align: center;
    }
</style>


@code {
    private MudDataGrid<IndexedShipment> _mudDataGrid;
    private readonly string[] monthList = { "کلی", "فروردین", "اردیبهشت", "خرداد", "تیر", "اَمرداد", "شهریور", "مهر", "آبان", "آذر", "دی", "بهمن", "اسفند" };
    private PersianCalendar persianCalendar = new();
    private string _month = "فروردین";
    private string? _selectedMonth;
    private bool isAuthorized;
    List<IndexedShipment> reportToExcel;

    public class IndexedShipment
    {
        [PropertyInfo(1, "ردیف", true, ColumnType.Number)]
        public long Index { get; set; }

        [PropertyInfo(1, "آیدی", false, ColumnType.Number)]
        public long Id { get; set; }

        [PropertyInfo(2, "تاریخ", true, ColumnType.Text)]
        public string ShipmentDatePersian { get; set; }

        [PropertyInfo(3, "روز", true, ColumnType.Text)]
        public string Weekday { get; set; }

        [PropertyInfo(4, "کد پرسنلی راننده", true, ColumnType.Number)]
        public int? DriverPersonnelCode { get; set; }

        [PropertyInfo(5, "راننده", true, ColumnType.Text)]
        public string? DriverName { get; set; }

        [PropertyInfo(6, "کد پرسنلی موزع", true, ColumnType.Number)]
        public int? DistributorPersonnelCode { get; set; }

        [PropertyInfo(7, "موزع", true, ColumnType.Text)]
        public string? DistributorName { get; set; }

        [PropertyInfo(8, "مسیر", true, ColumnType.Text)]
        public string RouteName { get; set; }

        [PropertyInfo(9, "انبار", true, ColumnType.Text)]
        public string? WarehouseName { get; set; }

        [PropertyInfo(10, "تعداد فاکتور", true, ColumnType.Number)]
        public int? InvoiceCount { get; set; }

        [PropertyInfo(11, "ریال فاکتور", true, ColumnType.Number)]
        public long? InvoiceAmount { get; set; }

        [PropertyInfo(12, "خروجی", true, ColumnType.Text)]
        public string ShipmentNumbers { get; set; }

        [PropertyInfo(13, "تعداد فاکتور مرجوعی", true, ColumnType.Number)]
        public int? ReturnInvoiceCount { get; set; }

        [PropertyInfo(14, "ریال فاکتور مرجوعی", true, ColumnType.Number)]
        public long? ReturnInvoiceAmount { get; set; }

        [PropertyInfo(15, "تعداد ف سرویس دوم", true, ColumnType.Number)]
        public int? SecondServiceInvoiceCount { get; set; }

        [PropertyInfo(16, "ریال ف سرویس دوم", true, ColumnType.Number)]
        public long? SecondServiceInvoiceAmount { get; set; }

        [PropertyInfo(17, "تعداد ف سرویس سوم", true, ColumnType.Number)]
        public int? ThirdServiceInvoiceCount { get; set; }

        [PropertyInfo(18, "ریال ف سرویس سوم", true, ColumnType.Number)]
        public long? ThirdServiceInvoiceAmount { get; set; }

        [PropertyInfo(19, "VIP", true, ColumnType.Boolean)]
        public bool HasVip { get; set; } = false;

        [PropertyInfo(20, "تعداد خلص ف", true, ColumnType.Number)]
        public int? NetInvoiceCount => !IsException ? (InvoiceCount ?? 0) + (SecondServiceInvoiceCount ?? 0) + (ThirdServiceInvoiceCount ?? 0) - (ReturnInvoiceCount ?? 0) : null;

        [PropertyInfo(21, "ریال خالص ف", true, ColumnType.Number)]
        public long? NetInvoiceAmount => !IsException ? (InvoiceAmount ?? 0) + (SecondServiceInvoiceAmount ?? 0) + (ThirdServiceInvoiceAmount ?? 0) - (ReturnInvoiceAmount ?? 0) : null;

        [PropertyInfo(100, "-", false, ColumnType.Boolean)]
        public bool IsException { get; set; } = false;

        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string InvoiceCountFormatted => InvoiceCount.HasValue ? InvoiceCount.Value.ToString("N0") : string.Empty;
        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string InvoiceAmountFormatted => InvoiceAmount.HasValue ? InvoiceAmount.Value.ToString("N0") : string.Empty;
        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string ReturnInvoiceCountFormatted => ReturnInvoiceCount.HasValue ? ReturnInvoiceCount.Value.ToString("N0") : string.Empty;
        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string ReturnInvoiceAmountFormatted => ReturnInvoiceAmount.HasValue ? ReturnInvoiceAmount.Value.ToString("N0") : string.Empty;
        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string SecondServiceInvoiceCountFormatted => SecondServiceInvoiceCount.HasValue ? SecondServiceInvoiceCount.Value.ToString("N0") : string.Empty;
        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string ThirdServiceInvoiceCountFormatted => ThirdServiceInvoiceCount.HasValue ? ThirdServiceInvoiceCount.Value.ToString("N0") : string.Empty;
        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string SecondServiceInvoiceAmountFormatted => SecondServiceInvoiceAmount.HasValue ? SecondServiceInvoiceAmount.Value.ToString("N0") : string.Empty;
        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string ThirdServiceInvoiceAmountFormatted => ThirdServiceInvoiceAmount.HasValue ? ThirdServiceInvoiceAmount.Value.ToString("N0") : string.Empty;
        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string NetInvoiceCountFormatted => NetInvoiceCount.HasValue ? NetInvoiceCount.Value.ToString("N0") : string.Empty;
        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string NetInvoiceAmountFormatted => NetInvoiceAmount.HasValue ? NetInvoiceAmount.Value.ToString("N0") : string.Empty;
    }



    private List<T> SafeFilteredItems<T>(MudDataGrid<T> grid)
    {
        if (grid == null)
            return new List<T>();

        try
        {
            return grid.FilteredItems?.ToList() ?? new List<T>();
        }
        catch
        {
            return new List<T>();
        }
    }

    private async Task PrepareExportData()
    {
        reportToExcel = SafeFilteredItems(_mudDataGrid);
    }

    void SetMonth()
    {
        var num = persianCalendar.GetMonth(DateTime.Now);
        _month = monthList[num - 1];
        _selectedMonth = num.ToString("00");
    }

    void ChangeMonth()
    {
        var num = Array.IndexOf(monthList, _month) + 1;
        _selectedMonth = num.ToString("00");
    }

    public string Month
    {
        get => _month; set
        {
            _month = value;
            ChangeMonth();
        }
    }

    private MudDataGrid<ShipmentWithIndex> table;



    private string shipmentNumbers = string.Empty;
    private readonly Shipment shipment = new();
    private List<Shipment> shipments = [];
    private string _searchString;
    public List<int> Count { get; set; } = [];


    void Refresh() => LoadData();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        LoadData();



        var authState = await authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        isAuthorized = user.Identity?.IsAuthenticated ?? false;
        StateHasChanged();
    }


    //meatadatagrid RowClick = "@RowClicked" RowContextMenuClick="RowRightClicked" SelectedItemsChanged="@SelectedItemsChanged"


    private List<IndexedShipment> indexedShipments = [];

    private string RowClassFunc(IndexedShipment element, int rowNumber)
    {
        element.Index = 1 + rowNumber + (table?.CurrentPage ?? 0) * (table?.RowsPerPage ?? 0);
        return string.Empty;
    }

    void LoadData()
    {
        SetMonth();
        shipments = dbContext.Shipments.Include(x => x.ShipmentNumbers).ToList();
        Services.Mapper.MapToDto(shipment, indexedShipments);

        foreach (var item in indexedShipments)
        {
            item.ShipmentNumbers = string.Join('-', shipments.FirstOrDefault(x => x.Id == item.Id)!.ShipmentNumbers);
        }

        StateHasChanged();
    }

    private Func<IndexedShipment, bool> Filter => s =>
    {
        bool matchesSearch = string.IsNullOrWhiteSpace(_searchString) || (
        (s.ShipmentDatePersian?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
        (s.Weekday?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
        (s.DriverName?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
        (s.DistributorName?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
        (s.RouteName?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
        (s.WarehouseName?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
        s.InvoiceCount.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
        s.InvoiceAmount.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
        s.ShipmentNumbers.Contains(_searchString, StringComparison.OrdinalIgnoreCase)) ||
        s.ReturnInvoiceCount.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
        s.ReturnInvoiceAmount.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
        s.SecondServiceInvoiceCount.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
        s.SecondServiceInvoiceAmount.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
        s.ThirdServiceInvoiceCount.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
        s.HasVip.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
        s.DriverPersonnelCode.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
        s.DistributorPersonnelCode.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
        s.NetInvoiceCount.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
        s.NetInvoiceAmount.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase
    );
        bool matchesMonth = string.IsNullOrWhiteSpace(_selectedMonth) ||
                  (s.ShipmentDatePersian?.Contains($"/{_selectedMonth}/") ?? false);

        PrepareExportData();
        return matchesSearch && matchesMonth;
    };


    void EditItem(IndexedShipment row)
    {
        nm.NavigateTo($"/edit-shipment/{row.Id}");
    }

    void RegisterReturn(IndexedShipment row)
    {
        nm.NavigateTo($"/register-return/{row.Id}");
    }
}

