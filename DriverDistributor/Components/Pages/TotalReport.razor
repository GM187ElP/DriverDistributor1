@page "/total-report"
@using System.Globalization
@using ClosedXML.Excel
@using DriverDistributor.Data
@using DriverDistributor.Entities
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using static DriverDistributor.Components.PersianDatePicker
@using static DriverDistributor.Components.Excel
@inject NavigationManager nm
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager nm
@inject AppDbContext dbContext
@inject IDbContextFactory<AppDbContext> dbContextFactory


<PageTitle>لیست حواله ها</PageTitle>



<h2 class="mt-2 mb-2">لیست حواله ها</h2>

<MudPaper Class="pa-2 mb-2" Outlined="true">
    <MudStack Row="true" Class="mb-2" Spacing="2" AlignItems="AlignItems.Center">

        <Excel @ref="excel" FileName="گزارش راننده و موزع" ExportRequested="OnExportRequested" />

        <MudSelect T="string"
                   @bind-Value="SelectedMonth"
                   @onchange=LoadDataAsync
                   Dense="true"
                   FitContent="true"
                   Clearable="false">
            @foreach (var month in monthList)
            {
                <MudSelectItem Value="@month">@month</MudSelectItem>
            }
        </MudSelect>

        <MudButton StartIcon="@Icons.Material.Filled.Refresh"
                   IconColor="Color.Primary"
                   Size="Size.Small"
                   @onclick="Refresh">
            آپدیت
        </MudButton>

        @* <MudToggleGroup T="bool?" SelectionMode="SelectionMode.SingleSelection" *@
        @* @bind-Value="IsGostaresh" *@
        @* @onchange="LoadDataAsync" *@
        @* Color="Color.Secondary" *@
        @* CheckMark *@
        @* FixedContent *@
        @* Class="toggle-group-fit" *@
        @* Delimiters="false"> *@
        @*     <MudToggleItem T="bool?" Value="true" Text="گسترش" Class="toggle-item-lg" /> *@
        @*     <MudToggleItem T="bool?" Value="null" Text="همه انبارها" Class="toggle-item-lg" /> *@
        @*     <MudToggleItem T="bool?" Value="false" Text="کوشش" Class="toggle-item-lg" /> *@
        @* </MudToggleGroup> *@

        <!-- Date picker + Clear Filter inline -->
        @* <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center"> *@
        @*     <PersianDatePicker For="() => Persian" @bind-Value="Persian" Label="تاریخ خروجی" /> *@

        @*     <!-- Display selected date info --> *@
        @*     @if (!string.IsNullOrWhiteSpace(Persian.DisplayDate)) *@
        @*     { *@
        @*         <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center"> *@
        @*             <MudText Color="Color.Info" Typo="Typo.h6">@($"{Persian.DayOfWeek},")</MudText> *@
        @*             <MudText Color="Color.Warning" Typo="Typo.h6">@($"{Persian.DayOfMonth}")</MudText> *@
        @*             <MudText Color="Color.Error" Typo="Typo.h6">@($"{Persian.MonthString}")</MudText> *@
        @*             <MudText Color="Color.Success" Typo="Typo.h6">@($"{Persian.Year}")</MudText> *@
        @*         </MudStack> *@
        @*     } *@
        @*     <MudButton OnClick="ClearDate" Color="Color.Error" Variant="Variant.Filled"> *@
        @*         <MudText Typo="Typo.h6"> *@
        @*             حذف فیلتر *@
        @*         </MudText> *@
        @*     </MudButton> *@
        @* </MudStack> *@
    </MudStack>

</MudPaper>

@*
<div style="height: calc(100vh - 400px); overflow-y: auto;">

        *@

<MudDataGrid @ref="_mudDataGrid"
             T="TotalReportDto"
             Items="@totalReportDtos"
             Dense="true"
             Bordered="true"
             Hover="true"
             RowClassFunc="@RowClassFunc"
             Striped="true"
             FixedHeader="true"
             Height="630px"
             Style="flex: 1; overflow: auto;"
             @* QuickFilter="@Filter" *@
             HeaderClass="table-header"
             Filterable=true
             ShowColumnOptions="false">

    <ToolBarContent>
        <MudTextField @bind-Value="_searchString"
                      Placeholder="جستجو"
                      Clearable=true
                      ClearIcon="@Icons.Material.Filled.Clear"
                      OnClearButtonClick="ClearDate"
                      Adornment="Adornment.Start"
                      Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="Size.Medium"
                      FullWidth=false
                      Class="mt-0" />
    </ToolBarContent>

    <Columns>

        <PropertyColumn Property="x => x.Index" Title="ردیف" StickyRight="true" HeaderClass="table-header" CellClass="table-cell" />

        <PropertyColumn Property="x => x.Name" Sortable="false" Title="تاریخ" StickyRight="true" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.PersonnelCode" Sortable="false" Title="روز" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.InvoiceCountFormatted" Sortable="false" Title="راننده" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.InvoiceAmountFormatted" Sortable="false" Title="موزع" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.ReturnInvoiceCountFormatted" Sortable="false" Title="مسیر" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.ReturnInvoiceAmountFormatted" Sortable="false" Title="انبار" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.NetInvoiceCountFormatted" Sortable="false" Title="تعداد فاکتور" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.NetInvoiceAmountFormatted" Sortable="false" Title="ریال فاکتور" HeaderClass="table-header" CellClass="table-cell" />

        <PropertyColumn Property="x => x.VIPCount" Sortable="false" Title="تعداد خالص ف" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.ExceptionCount" Sortable="false" Title="خروجی" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.AbsentCount" Sortable="false" Title="تعداد فاکتور مرجوعی" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.AtAutoMechCount" Sortable="false" Title="ریال فاکتور مرجوعی" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.AtWarehouseCount" Sortable="false" Title="تعداد ف سرویس دوم" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.CapitalCityCount" Sortable="false" Title="ریال ف سرویس دوم" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.NonCapitalCityCount" Sortable="false" Title="تعداد ف سرویس سوم" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.OtherCount" Sortable="false" Title="ریال ف سرویس سوم" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.OffCount" Sortable="false" Title="VIP" HeaderClass="table-header" CellClass="table-cell" />
    </Columns>
</MudDataGrid>

<MudMessageBox @ref="_mudMessageBox" Title=" هشدار!">
    <TitleContent>
        <MudAlert Severity="Severity.Warning">
            هشدار
        </MudAlert>
    </TitleContent>
    <MessageContent>
        <MudText Typo="Typo.h6">
            آیا از حذف ردیف مطمئن هستید!؟
        </MudText>
    </MessageContent>
    <CancelButton>
        <MudButton Style="font-weight:bold;" Variant="Variant.Filled" Color="Color.Info" StartIcon="@Icons.Material.Filled.CancelPresentation">           انصراف        </MudButton>
    </CancelButton>
    <YesButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">حذف</MudButton>
    </YesButton>
</MudMessageBox>

@* </div> *@

<style>
    .table-header {
        background-color: #1976d2 !important;
        color: white !important;
        text-align: center !important padding: 4px !important;
        vertical-align: middle !important;
        font-weight: bold !important;
    }

    body, html {
        overflow: hidden !important;
        height: 99% !important;
        width: 100% !important;
        margin: 0 !important;
        padding: 0 !important;
    }

    .table-cell {
        padding: 2px 6px !important;
        font-size: small;
        text-align: center;
    }
</style>


@code {
    private readonly DialogOptions _closeOnEscape = new() { CloseOnEscapeKey = true };
    private MudMessageBox _mudMessageBox;

    private PersianCalendarClass _persian = new(DateTime.Today.AddDays(0), isEmptyAtStart: true);
    private MudDataGrid<TotalReportDto> _mudDataGrid;
    private readonly string[] monthList = { "کلی", "فروردین", "اردیبهشت", "خرداد", "تیر", "اَمرداد", "شهریور", "مهر", "آبان", "آذر", "دی", "بهمن", "اسفند" };
    private string? _selectedMonth = "کلی";
    private bool isAuthorized;
    private bool? _isGostaresh = null;
    private string? _distributionCenter = null;
    private string _searchString;
    private List<TotalReportDto> reportToExcel;
    private Excel excel;
    private AppDbContext dbc;
    private List<TotalReportDto> totalReportDtos;

    private PersianCalendarClass Persian
    {
        get => _persian;
        set
        {
            _persian = value;
            _searchString = value.DisplayDate;
            totalReportDtos.Where(Filter);
        }
    }

    private bool? IsGostaresh
    {
        get => _isGostaresh;
        set
        {
            _isGostaresh = value;
            _distributionCenter = value switch
            {
                true => "گسترش",
                false => "کوشش",
                null => null
            };
        }
    }

    private async Task LoadDataAsync()
    {
        var dbContext = await dbContextFactory.CreateDbContextAsync();
        totalReportDtos = await LoadDataQueryAsync(dbContext).ToListAsync() ?? new();
    }

    private IQueryable<TotalReportDto> LoadDataQueryAsync(AppDbContext? dbContext)
    {
        var mainQuery = dbContext.Shipments.AsQueryable();

        var query = _selectedMonth != "کلی"
            ? mainQuery.Where(s => s.MonthName == _selectedMonth)
            : mainQuery;

        return query
            .SelectMany(s => new[] { new { Name = s.DriverName, Shipment = s }, new { Name = s.DistributorName, Shipment = s } })
            .GroupBy(x => x.Name)
            .Select(g => new TotalReportDto
                {
                    Name = g.Key,
                    PersonnelCode = g.Any(x => x.Shipment.DriverName == g.Key) ? g.Where(x => x.Shipment.DriverName == g.Key).Select(x => x.Shipment.DriverPersonnelCode).FirstOrDefault().ToString() ?? string.Empty : g.Where(x => x.Shipment.DistributorName == g.Key)
                            .Select(x => x.Shipment.DistributorPersonnelCode)
                            .FirstOrDefault().ToString() ?? string.Empty,

                    InvoiceCount = g.Where(x => !x.Shipment.IsException).Sum(x => (x.Shipment.InvoiceCount ?? 0) + (x.Shipment.SecondServiceInvoiceCount ?? 0) + (x.Shipment.ThirdServiceInvoiceCount ?? 0)),
                    InvoiceAmount = g.Where(x => !x.Shipment.IsException).Sum(x => (x.Shipment.InvoiceAmount ?? 0) + (x.Shipment.SecondServiceInvoiceAmount ?? 0) + (x.Shipment.ThirdServiceInvoiceAmount ?? 0)),
                    ReturnInvoiceCount = g.Where(x => !x.Shipment.IsException).Sum(x => x.Shipment.ReturnInvoiceCount ?? 0),
                    ReturnInvoiceAmount = g.Where(x => !x.Shipment.IsException).Sum(x => x.Shipment.ReturnInvoiceAmount ?? 0),

                    VIPCount = g.Sum(x => (!x.Shipment.IsException && x.Shipment.HasVip) ? 1 : 0),
                    CapitalCityCount = g.Sum(x => (x.Shipment.RouteName == "شیراز") ? 1 : 0),
                    NonCapitalCityCount = g.Sum(x => (!x.Shipment.IsException && x.Shipment.RouteName != "شیراز") ? 1 : 0),
                    ExceptionCount = g.Count(x => x.Shipment.IsException),
                    AtWarehouseCount = g.Sum(x => (x.Shipment.IsException && x.Shipment.RouteName == "انبار") ? 1 : 0),
                    OffCount = g.Sum(x => (x.Shipment.IsException && x.Shipment.RouteName == "مرخصی") ? 1 : 0),
                    AtAutoMechCount = g.Sum(x => (x.Shipment.IsException && x.Shipment.RouteName == "تعمیرگاه") ? 1 : 0),
                    OtherCount = g.Sum(x => (x.Shipment.IsException && x.Shipment.RouteName == "متفرقه") ? 1 : 0),
                    AbsentCount = g.Sum(x => (x.Shipment.IsException && x.Shipment.RouteName == "غیبت") ? 1 : 0),
                });
    }


    public class TotalReportDto
    {
        [PropertyInfo(1, "ردیف", true, ColumnType.Number)]
        public long Index { get; set; }

        [PropertyInfo(1, "نام", true, ColumnType.Text)]
        public string Name { get; set; }

        [PropertyInfo(2, "کد پرسنلی", true, ColumnType.Text)]
        public string PersonnelCode { get; set; }

        [PropertyInfo(3, "تعداد فاکتور", true, ColumnType.Number)]
        public int InvoiceCount { get; set; }

        [PropertyInfo(4, "مبلغ فاکتور", true, ColumnType.Number)]
        public long InvoiceAmount { get; set; }

        [PropertyInfo(5, "تعداد مرجوعی", true, ColumnType.Number)]
        public int ReturnInvoiceCount { get; set; }

        [PropertyInfo(6, "مبلغ مرجوعی", true, ColumnType.Number)]
        public long ReturnInvoiceAmount { get; set; }

        [PropertyInfo(7, "ویژه", true, ColumnType.Number)]
        public int VIPCount { get; set; }

        [PropertyInfo(8, "شیراز", true, ColumnType.Number)]
        public int CapitalCityCount { get; set; }

        [PropertyInfo(9, "غیر شیراز", true, ColumnType.Number)]
        public int NonCapitalCityCount { get; set; }

        [PropertyInfo(10, "تعداد استثنا", true, ColumnType.Number)]
        public int ExceptionCount { get; set; }

        [PropertyInfo(11, "انبار", true, ColumnType.Number)]
        public int AtWarehouseCount { get; set; }

        [PropertyInfo(12, "مرخصی", true, ColumnType.Number)]
        public int OffCount { get; set; }

        [PropertyInfo(13, "تعمیرگاه", true, ColumnType.Number)]
        public int AtAutoMechCount { get; set; }

        [PropertyInfo(14, "متفرقه", true, ColumnType.Number)]
        public int OtherCount { get; set; }

        [PropertyInfo(15, "غیبت", true, ColumnType.Number)]
        public int AbsentCount { get; set; }

        [PropertyInfo(16, "خالص تعداد", true, ColumnType.Number)]
        public int NetInvoiceCount => InvoiceCount - ReturnInvoiceCount;

        [PropertyInfo(17, "خالص مبلغ", true, ColumnType.Number)]
        public long NetInvoiceAmount => InvoiceAmount - ReturnInvoiceAmount;

        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string InvoiceCountFormatted => InvoiceCount.ToString("N0");
        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string InvoiceAmountFormatted => InvoiceAmount.ToString("N0");
        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string ReturnInvoiceCountFormatted => ReturnInvoiceCount.ToString("N0");
        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string ReturnInvoiceAmountFormatted => ReturnInvoiceAmount.ToString("N0");
        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string NetInvoiceCountFormatted => NetInvoiceCount.ToString("N0");
        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string NetInvoiceAmountFormatted => NetInvoiceAmount.ToString("N0");
    }

    private async Task OpenDialogAsync(long id)
    {
        bool? result;
        result = await _mudMessageBox.ShowAsync();

        if (result is true)
        {
            var row = await dbContext.Shipments.FindAsync(id);
            if (row is not null)
            {
                dbContext.Shipments.Remove(row);
                await dbContext.SaveChangesAsync();
            }
        }
        await LoadDataAsync();
    }

    void ClearDate()
    {
        if (Persian.DisplayDate != null)
            Persian.DisplayDate = string.Empty;

        _searchString = string.Empty;
        SetMonth();
        IsGostaresh = null;
    }

    private List<T> SafeFilteredItems<T>(MudDataGrid<T> grid)
    {
        if (grid == null)
            return new List<T>();

        try
        {
            return grid.FilteredItems?.ToList() ?? new List<T>();
        }
        catch
        {
            return new List<T>();
        }
    }

    private async Task PrepareExportData()
    {
        reportToExcel = SafeFilteredItems(_mudDataGrid);
    }

    void SetMonth()
    {
        PersianCalendar persianCalendar = new();
        var num = persianCalendar.GetMonth(DateTime.Now);
        _selectedMonth = monthList[num];
    }

    public string SelectedMonth
    {
        get => _selectedMonth;
        set
        {
            _selectedMonth = value;
        }
    }

    async Task Refresh() => await LoadDataAsync();

    protected override async Task OnInitializedAsync()
    {
        dbc = await dbContextFactory.CreateDbContextAsync();
        SetMonth();
        LoadDataQueryAsync(dbc);
        Persian = new(DateTime.Today.AddDays(0), isEmptyAtStart: true);
        await base.OnInitializedAsync();
        await LoadDataAsync();

        var authState = await authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        isAuthorized = user.Identity?.IsAuthenticated ?? false;
        StateHasChanged();
    }


    private string RowClassFunc(TotalReportDto element, int rowNumber)
    {
        element.Index = 1 + rowNumber + (_mudDataGrid?.CurrentPage ?? 0) * (_mudDataGrid?.RowsPerPage ?? 0);
        return string.Empty;
    }

    private Func<TotalReportDto, bool> Filter => s =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        var search = _searchString.Trim();

        bool ContainsIgnoreCase(string? source) =>
        source?.Contains(search, StringComparison.OrdinalIgnoreCase) ?? false;

        bool matchesSearch =
        ContainsIgnoreCase(s.Name) ||
        ContainsIgnoreCase(s.PersonnelCode) ||
        s.InvoiceCount.ToString().Contains(search, StringComparison.OrdinalIgnoreCase) ||
        s.InvoiceAmount.ToString().Contains(search, StringComparison.OrdinalIgnoreCase) ||
        s.ReturnInvoiceCount.ToString().Contains(search, StringComparison.OrdinalIgnoreCase) ||
        s.ReturnInvoiceAmount.ToString().Contains(search, StringComparison.OrdinalIgnoreCase) ||
        s.NetInvoiceCount.ToString().Contains(search, StringComparison.OrdinalIgnoreCase) ||
        s.NetInvoiceAmount.ToString().Contains(search, StringComparison.OrdinalIgnoreCase) ||

        // Formatted fields
        ContainsIgnoreCase(s.InvoiceCountFormatted) ||
        ContainsIgnoreCase(s.InvoiceAmountFormatted) ||
        ContainsIgnoreCase(s.ReturnInvoiceCountFormatted) ||
        ContainsIgnoreCase(s.ReturnInvoiceAmountFormatted) ||
        ContainsIgnoreCase(s.NetInvoiceCountFormatted) ||
        ContainsIgnoreCase(s.NetInvoiceAmountFormatted);

        // bool filterByDate = true;
        // if (!string.IsNullOrEmpty(Persian?.MonthString))
        //     filterByDate = s.ShipmentDatePersian == Persian.DisplayDate;

        return matchesSearch;
    };


    private async Task OnExportRequested()
    {
        await PrepareExportData();

        var workbook = new XLWorkbook();
        var worksheet = workbook.AddWorksheet("گزارش کلی");

        var columnsdsfs = excel.SetData(reportToExcel, worksheet, 1, 2, null);

        await excel.Export(workbook);
    }
}



