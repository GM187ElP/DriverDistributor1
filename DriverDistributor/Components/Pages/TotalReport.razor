@page "/total-report"
@using System.Globalization
@using ClosedXML.Excel
@using DriverDistributor.Data
@using DriverDistributor.Entities
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using static DriverDistributor.Components.PersianDatePicker
@using static DriverDistributor.Components.Excel
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager nm
@inject AppDbContext dbContext
@inject IDbContextFactory<AppDbContext> dbContextFactory
@attribute [Authorize(Roles = "Admin,LogisticManager,HR")]

<PageTitle>گزارش کلی</PageTitle>

<h2 class="mt-2 mb-2">گزارش کلی</h2>

<MudPaper Class="pa-2 mb-2" Outlined="true">
    <MudStack Row="true" Class="mb-2" Spacing="2" AlignItems="AlignItems.Center">

        <Excel @ref="excel" FileName="گزارش راننده و موزع" ExportRequested="OnExportRequested" />

        <MudSelect T="string"
                   Value="_selectedMonth"
                   ValueChanged=LoadDataAsync
                   Dense="true"
                   FitContent="true"
                   Clearable="false">
            @foreach (var month in monthList)
            {
                <MudSelectItem Value="@month">@month</MudSelectItem>
            }
        </MudSelect>
        @* 
        <MudButton StartIcon="@Icons.Material.Filled.Refresh"
                   IconColor="Color.Primary"
                   Size="Size.Small"
                   @onclick="Refresh">
            آپدیت
        </MudButton> *@

        <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
            <MudButton OnClick="ClearDate" Color="Color.Error" Variant="Variant.Filled">
                <MudText Typo="Typo.h6">
                    حذف فیلتر
                </MudText>
            </MudButton>
        </MudStack>
    </MudStack>

</MudPaper>

@*
<div style="height: calc(100vh - 400px); overflow-y: auto;">

        *@


<MudDataGrid @ref="_mudDataGrid"
             T="TotalReportDto"
             Items="@totalReportDtos"
             Dense="true"
             Bordered="true"
             Hover="true"
             RowClassFunc="@RowClassFunc"
             QuickFilter="Filter"
             Striped="true"
             FixedHeader="true"
             Height="630px"
             Style="flex: 1; overflow: auto;"
             HeaderClass="table-header"
             Filterable=true
             ShowColumnOptions="false">

    <ToolBarContent>
        <MudTextField @bind-Value="SearchString"
                      Placeholder="جستجو"
                      Clearable=true
                      ClearIcon="@Icons.Material.Filled.Clear"
                      OnClearButtonClick="ClearDate"
                      Adornment="Adornment.Start"
                      Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="Size.Medium"
                      FullWidth=false
                      Class="mt-0" />
    </ToolBarContent>

    <Columns>
        <PropertyColumn Property="x => x.Index" Sortable="false" Title="ردیف" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.Name" Sortable="false" Title="نام" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.PersonnelCode" Sortable="false" Title="کد پرسنلی" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.WorkingDaysCount" Sortable="false" Title="تعداد روز کاری" HeaderClass="table-header" CellClass="table-cell" />

        <PropertyColumn Property="x => x.DriverCount" Sortable="false" Title="تعداد روز رانندگی" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.DistributorCount" Sortable="false" Title="تعداد روز موزعی" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.DriverDistributorCount" Sortable="false" Title="تعداد روز راننده-موزعی" HeaderClass="table-header" CellClass="table-cell" />

        <PropertyColumn Property="x => x.WarehouseTaksunInvoiceCount" Sortable="false" Title="تعداد فاکتور انبار تکسان" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.WarehouseKhoshbakhtInvoiceCount" Sortable="false" Title="تعداد فاکتور انبار خوشبخت" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.WarehouseMakenzyInvoiceCount" Sortable="false" Title="تعداد فاکتور انبار مکنزی" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.WarehouseNooshidaniInvoiceCount" Sortable="false" Title="تعداد فاکتور انبار نوشیدنی" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.WarehouseFiroozInvoiceCount" Sortable="false" Title="تعداد فاکتور انبار فیروز" HeaderClass="table-header" CellClass="table-cell" />

        <PropertyColumn Property="x => x.WarehouseTaksunInvoiceAmountFormatted" Sortable="false" Title="مبلغ فاکتور انبار تکسان" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.WarehouseKhoshbakhtInvoiceAmountFormatted" Sortable="false" Title="مبلغ فاکتور انبار خوشبخت" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.WarehouseMakenzyInvoiceAmountFormatted" Sortable="false" Title="مبلغ فاکتور انبار  مکنزی" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.WarehouseNooshidaniInvoiceAmountFormatted" Sortable="false" Title="مبلغ فاکتور انبار نوشیدنی" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.WarehouseFiroozInvoiceAmountFormatted" Sortable="false" Title="مبلغ فاکتور انبار فیروز" HeaderClass="table-header" CellClass="table-cell" />

        <PropertyColumn Property="x => x.VIPCount" Sortable="false" Title="VIP" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.CapitalCityCount" Sortable="false" Title="شیراز" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.NonCapitalCityCount" Sortable="false" Title="غیر شیراز" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.ExceptionCount" Sortable="false" Title="خاص" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.AtWarehouseCount" Sortable="false" Title="انبار" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.OffCount" Sortable="false" Title="مرخصی" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.AtAutoMechCount" Sortable="false" Title="تعمیرگاه" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.OtherCount" Sortable="false" Title="متفرقه" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.AbsentCount" Sortable="false" Title="غیبت" HeaderClass="table-header" CellClass="table-cell" />

        <PropertyColumn Property="x => x.DistributorInvoiceCountFormatted" Sortable="false" Title="تعداد فاکتور موزعی" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.DistributorInvoiceAmountFormatted" Sortable="false" Title="مبلغ فاکتور موزعی" HeaderClass="table-header" CellClass="table-cell" />

        <PropertyColumn Property="x => x.DriverInvoiceCountFormatted" Sortable="false" Title="تعداد فاکتور رانندگی" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.DriverInvoiceAmountFormatted" Sortable="false" Title="مبلغ فاکتور رانندگی" HeaderClass="table-header" CellClass="table-cell" />

        <PropertyColumn Property="x => x.DriverDistributorInvoiceCountFormatted" Sortable="false" Title="تعداد فاکتور راننده-موزعی" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.DriverDistributorInvoiceAmountFormatted" Sortable="false" Title="مبلغ فاکتور راننده-موزعی" HeaderClass="table-header" CellClass="table-cell" />

        <PropertyColumn Property="x => x.DistributorReturnInvoiceCountFormatted" Sortable="false" Title="تعداد فاکتور مرجوعی موزعی" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.DistributorReturnInvoiceAmountFormatted" Sortable="false" Title="مبلغ فاکتور مرجوعی موزعی" HeaderClass="table-header" CellClass="table-cell" />

        <PropertyColumn Property="x => x.DriverReturnInvoiceCountFormatted" Sortable="false" Title="تعداد فاکتور مرجوعی رانندگی" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.DriverReturnInvoiceAmountFormatted" Sortable="false" Title="مبلغ مرجوعی رانندگی" HeaderClass="table-header" CellClass="table-cell" />

        <PropertyColumn Property="x => x.DriverDistributorReturnInvoiceCountFormatted" Sortable="false" Title="تعداد فاکتور مرجوعی راننده-موزعی" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.DriverDistributorReturnInvoiceAmountFormatted" Sortable="false" Title="مبلغ مرجوعی راننده-موزعی" HeaderClass="table-header" CellClass="table-cell" />

        <PropertyColumn Property="x => x.DriverNetInvoiceCountFormatted" Sortable="false" Title="تعداد خالص فاکتور رانندگی" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.DriverNetInvoiceAmountFormatted" Sortable="false" Title="مبلغ خالص فاکتور رانندگی" HeaderClass="table-header" CellClass="table-cell" />

        <PropertyColumn Property="x => x.DriverDistributorNetInvoiceCountFormatted" Sortable="false" Title="تعداد خالص فاکتور راننده-موزعی" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.DriverDistributorNetInvoiceAmountFormatted" Sortable="false" Title="خالص مبلغ فاکتور راننده-موزعی" HeaderClass="table-header" CellClass="table-cell" />

        <PropertyColumn Property="x => x.DistributorNetInvoiceCountFormatted" Sortable="false" Title="تعداد خالص فاکتور موزعی" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.DistributorNetInvoiceAmountFormatted" Sortable="false" Title="مبلغ خالص فاکتور موزعی" HeaderClass="table-header" CellClass="table-cell" />

        <PropertyColumn Property="x => x.NetInvoiceCountFormatted" Sortable="false" Title="تعداد خالص فاکتور" HeaderClass="table-header" CellClass="table-cell" />
        <PropertyColumn Property="x => x.NetInvoiceAmountFormatted" Sortable="false" Title="مبلغ خالص فاکتور" HeaderClass="table-header" CellClass="table-cell" />

    </Columns>
</MudDataGrid>


<MudMessageBox @ref="_mudMessageBox" Title=" هشدار!">
    <TitleContent>
        <MudAlert Severity="Severity.Warning">
            هشدار
        </MudAlert>
    </TitleContent>
    <MessageContent>
        <MudText Typo="Typo.h6">
            آیا از حذف ردیف مطمئن هستید!؟
        </MudText>
    </MessageContent>
    <CancelButton>
        <MudButton Style="font-weight:bold;" Variant="Variant.Filled" Color="Color.Info" StartIcon="@Icons.Material.Filled.CancelPresentation">           انصراف        </MudButton>
    </CancelButton>
    <YesButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">حذف</MudButton>
    </YesButton>
</MudMessageBox>

@* </div> *@

<style>
    .table-header {
        background-color: #1976d2 !important;
        color: white !important;
        text-align: center !important padding: 4px !important;
        vertical-align: middle !important;
        font-weight: bold !important;
    }

    body, html {
        overflow: hidden !important;
        height: 99% !important;
        width: 100% !important;
        margin: 0 !important;
        padding: 0 !important;
    }

    .table-cell {
        padding: 2px 6px !important;
        font-size: small;
        text-align: center;
    }
</style>


@code {
    private readonly DialogOptions _closeOnEscape = new() { CloseOnEscapeKey = true };
    private MudMessageBox _mudMessageBox;
    private string _currentMonth;

    private PersianCalendarClass _persian = new(DateTime.Today.AddDays(0), isEmptyAtStart: true);
    private MudDataGrid<TotalReportDto> _mudDataGrid;
    private readonly string[] monthList = { "کلی", "فروردین", "اردیبهشت", "خرداد", "تیر", "اَمرداد", "شهریور", "مهر", "آبان", "آذر", "دی", "بهمن", "اسفند" };
    private string? _selectedMonth = "کلی";
    private bool isAuthorized;
    private bool? _isGostaresh = null;
    private string? _distributionCenter = null;
    private string SearchString { get; set; }
    private List<TotalReportDto> reportToExcel;
    private Excel excel;
    private AppDbContext dbc;
    private List<TotalReportDto> totalReportDtos;

    private bool? IsGostaresh
    {
        get => _isGostaresh;
        set
        {
            _isGostaresh = value;
            _distributionCenter = value switch
            {
                true => "گسترش",
                false => "کوشش",
                null => null
            };
        }
    }

    private async Task LoadDataAsync(string? selectedMonth)
    {
        var dbContext = await dbContextFactory.CreateDbContextAsync();
        var mainQuery = dbContext.Shipments.AsQueryable();

        if (!string.IsNullOrWhiteSpace(selectedMonth))
            _selectedMonth = selectedMonth;

        var query = _selectedMonth != "کلی"
            ? mainQuery.Where(s => s.MonthName == _selectedMonth)
            : mainQuery;


        var driverNames = await query
         .Where(s => !string.IsNullOrEmpty(s.DriverName))
         .Select(s => s.DriverName!)
         .Distinct()
         .ToListAsync();

        var distributorNames = await query
            .Where(s => !string.IsNullOrEmpty(s.DistributorName))
            .Select(s => s.DistributorName!)
            .Distinct()
            .ToListAsync();

        var allNames = driverNames
            .Concat(distributorNames)
            .Distinct()
            .ToList();

        var shipments = await query
            .Where(s => allNames.Contains(s.DriverName!) || allNames.Contains(s.DistributorName!))
            .ToListAsync();

        var combinedList = shipments
     .SelectMany(s => new[]
     {
        !string.IsNullOrEmpty(s.DriverName)
            ? new ShipmentNameDto { Name = s.DriverName!, Shipment = s }
            : null,
        !string.IsNullOrEmpty(s.DistributorName)
            ? new ShipmentNameDto { Name = s.DistributorName!, Shipment = s }
            : null
                      }.Where(x => x != null)!)
     .ToList();

        var test = combinedList.GroupBy(x => x.Name);
        var notIsException = test.Select(g => g.Where(x => !x.Shipment.IsException));
        var isException = test.Select(g => g.Where(x => x.Shipment.IsException));

        TotalReportDto obj = new();
        totalReportDtos = test
      .Select(g => new TotalReportDto
          {
              Name = g.Key,

              PersonnelCode = Filtering.GetPersonnelCode(g),

              DriverInvoiceCount = Filtering.InvoiceCount(g, "راننده"),
              DriverInvoiceAmount = Filtering.InvoiceAmount(g, "راننده"),
              DriverReturnInvoiceCount = Filtering.ReturnInvoiceCount(g, "راننده"),
              DriverReturnInvoiceAmount = Filtering.ReturnInvoiceAmount(g, "راننده"),

              DistributorInvoiceCount = Filtering.InvoiceCount(g, "موزع"),
              DistributorInvoiceAmount = Filtering.InvoiceAmount(g, "موزع"),
              DistributorReturnInvoiceCount = Filtering.ReturnInvoiceCount(g, "موزع"),
              DistributorReturnInvoiceAmount = Filtering.ReturnInvoiceAmount(g, "موزع"),

              DriverDistributorInvoiceCount = Filtering.InvoiceCount(g, "راننده_موزع"),
              DriverDistributorInvoiceAmount = Filtering.InvoiceAmount(g, "راننده_موزع"),
              DriverDistributorReturnInvoiceCount = Filtering.ReturnInvoiceCount(g, "راننده_موزع"),
              DriverDistributorReturnInvoiceAmount = Filtering.ReturnInvoiceAmount(g, "راننده_موزع"),

              WarehouseTaksunInvoiceCount = Filtering.WarehouseInvoiceCount(g, "تکسان"),
              WarehouseKhoshbakhtInvoiceCount = Filtering.WarehouseInvoiceCount(g, "خوشبخت"),
              WarehouseFiroozInvoiceCount = Filtering.WarehouseInvoiceCount(g, "فيروز"),
              WarehouseMakenzyInvoiceCount = Filtering.WarehouseInvoiceCount(g, "مکنزي"),
              WarehouseNooshidaniInvoiceCount = Filtering.WarehouseInvoiceCount(g, "نوشيدني"),

              WarehouseTaksunInvoiceAmount = Filtering.WarehouseInvoiceAmount(g, "تکسان"),
              WarehouseKhoshbakhtInvoiceAmount = Filtering.WarehouseInvoiceAmount(g, "خوشبخت"),
              WarehouseFiroozInvoiceAmount = Filtering.WarehouseInvoiceAmount(g, "فيروز"),
              WarehouseMakenzyInvoiceAmount = Filtering.WarehouseInvoiceAmount(g, "مکنزي"),
              WarehouseNooshidaniInvoiceAmount = Filtering.WarehouseInvoiceAmount(g, "نوشيدني"),

              DriverDistributorCount = Filtering.DutyCount(g, "راننده_موزع"),
              DriverCount = Filtering.DutyCount(g, "راننده"),
              DistributorCount = Filtering.DutyCount(g, "موزع"),

              VIPCount = Filtering.VipCount(g),
              CapitalCityCount = Filtering.CityCount(g, true),
              NonCapitalCityCount = Filtering.CityCount(g, false),

              ExceptionCount = Filtering.ExceptionCount(g),
              AtWarehouseCount = Filtering.ExceptionRouteCount(g, "انبار"),
              OffCount = Filtering.ExceptionRouteCount(g, "مرخصی"),
              AtAutoMechCount = Filtering.ExceptionRouteCount(g, "تعمیرگاه"),
              OtherCount = Filtering.ExceptionRouteCount(g, "متفرقه"),
              AbsentCount = Filtering.ExceptionRouteCount(g, "غیبت"),
          }).ToList();
        StateHasChanged();
    }

    public class ShipmentNameDto
    {
        public string Name { get; set; } = "";
        public Shipment Shipment { get; set; } = null!;
    }

    private class Filtering
    {
        public static bool IsException(ShipmentNameDto x) => x.Shipment.IsException;

        public static bool IsNotException(ShipmentNameDto x) => !x.Shipment.IsException;

        public static int ExceptionRouteCount(IGrouping<string, ShipmentNameDto?> g, string routeName) => g.Sum(x => (IsException(x) && x.Shipment.RouteName == routeName) ? 1 : 0);

        public static string GetPersonnelCode(IGrouping<string, ShipmentNameDto?> g) => g.Any(x => x.Shipment.DriverName == g.Key) ? g.Where(x => x.Shipment.DriverName == g.Key && x.Shipment.DriverPersonnelCode != null).Select(x => x.Shipment.DriverPersonnelCode).FirstOrDefault() ?? string.Empty : g.Where(x => x.Shipment.DistributorName == g.Key && x.Shipment.DistributorPersonnelCode != null).Select(x => x.Shipment.DistributorPersonnelCode).FirstOrDefault() ?? string.Empty;

        public static int ExceptionCount(IGrouping<string, ShipmentNameDto?> g) => g.Count(x => Filtering.IsException(x));

        public static int CityCount(IGrouping<string, ShipmentNameDto?> g, bool isCapital)
        {
            if (isCapital)
                return g.Sum(x => (IsNotException(x) && x.Shipment.RouteName == "شیراز") ? 1 : 0);
            else
                return g.Sum(x => (IsNotException(x) && x.Shipment.RouteName != "شیراز") ? 1 : 0);
        }

        public static int VipCount(IGrouping<string, ShipmentNameDto?> g) => g.Sum(x => (IsNotException(x) && x.Shipment.HasVip) ? 1 : 0);

        public static int DutyCount(IGrouping<string, ShipmentNameDto?> g, string duty)
        {
            if (duty != "موزع")
                return g.Sum(x => (IsNotException(x) && x.Shipment.DriverName == g.Key && x.Shipment.DriverDuty == duty) ? 1 : 0);
            else
                return g.Sum(x => (IsNotException(x) && x.Shipment.DistributorName == g.Key && x.Shipment.DistributorDuty == duty) ? 1 : 0);
        }

        public static int InvoiceCount(IGrouping<string, ShipmentNameDto?> g, string duty)
        {
            if (duty != "موزع")
                return g.Where(x => IsNotException(x) && x.Shipment.DriverName == g.Key && x.Shipment.DriverDuty == duty).Sum(x => (x.Shipment.InvoiceCount ?? 0) + (x.Shipment.SecondServiceInvoiceCount ?? 0) + (x.Shipment.ThirdServiceInvoiceCount ?? 0));
            else
                return g.Where(x => IsNotException(x) && x.Shipment.DistributorName == g.Key && x.Shipment.DistributorDuty == duty).Sum(x => (x.Shipment.InvoiceCount ?? 0) + (x.Shipment.SecondServiceInvoiceCount ?? 0) + (x.Shipment.ThirdServiceInvoiceCount ?? 0));
        }

        public static bool IsWarehouse(ShipmentNameDto? dto, string warehouseName) => dto.Shipment.WarehouseName == warehouseName;
        public static int WarehouseInvoiceCount(IGrouping<string, ShipmentNameDto?> g, string warehouseName) => g.Where(x => (IsNotException(x) && IsWarehouse(x, warehouseName))).Sum(x => (x.Shipment.InvoiceCount ?? 0) + (x.Shipment.SecondServiceInvoiceCount ?? 0) + (x.Shipment.ThirdServiceInvoiceCount ?? 0) - (x.Shipment.ReturnInvoiceCount ?? 0));//


        public static long WarehouseInvoiceAmount(IGrouping<string, ShipmentNameDto?> g, string warehouseName) => g.Where(x => (IsNotException(x) && IsWarehouse(x, warehouseName))).Sum(x => (x.Shipment.InvoiceAmount ?? 0) + (x.Shipment.SecondServiceInvoiceAmount ?? 0) + (x.Shipment.ThirdServiceInvoiceAmount ?? 0) - (x.Shipment.ReturnInvoiceAmount ?? 0));//


        public static long InvoiceAmount(IGrouping<string, ShipmentNameDto?> g, string duty)
        {
            if (duty != "موزع")
                return g.Where(x => IsNotException(x) && x.Shipment.DriverName == g.Key && x.Shipment.DriverDuty == duty).Sum(x => (x.Shipment.InvoiceAmount ?? 0) + (x.Shipment.SecondServiceInvoiceAmount ?? 0) + (x.Shipment.ThirdServiceInvoiceAmount ?? 0));
            else
                return g.Where(x => IsNotException(x) && x.Shipment.DistributorName == g.Key && x.Shipment.DistributorDuty == duty).Sum(x => (x.Shipment.InvoiceAmount ?? 0) + (x.Shipment.SecondServiceInvoiceAmount ?? 0) + (x.Shipment.ThirdServiceInvoiceAmount ?? 0));
        }
        public static int ReturnInvoiceCount(IGrouping<string, ShipmentNameDto?> g, string duty)
        {
            if (duty != "موزع")
                return g.Where(x => IsNotException(x) && x.Shipment.DriverName == g.Key && x.Shipment.DriverDuty == duty).Sum(x => x.Shipment.ReturnInvoiceCount ?? 0);
            else
                return g.Where(x => IsNotException(x) && x.Shipment.DistributorName == g.Key && x.Shipment.DistributorDuty == duty).Sum(x => x.Shipment.ReturnInvoiceCount ?? 0);
        }
        public static long ReturnInvoiceAmount(IGrouping<string, ShipmentNameDto?> g, string duty)
        {
            if (duty != "موزع")
                return g.Where(x => IsNotException(x) && x.Shipment.DriverName == g.Key && x.Shipment.DriverDuty == duty).Sum(x => x.Shipment.ReturnInvoiceAmount ?? 0);
            else
                return g.Where(x => IsNotException(x) && x.Shipment.DistributorName == g.Key && x.Shipment.DistributorDuty == duty).Sum(x => x.Shipment.ReturnInvoiceAmount ?? 0);
        }
    }


    public class TotalReportDto
    {
        public static bool IsDriver(ShipmentNameDto x, string name)
        {
            return !x.Shipment.IsException
                   && x.Shipment.DriverName == name
                   && x.Shipment.DriverDuty == "راننده";
        }



        [PropertyInfo(1, "ردیف", true, ColumnType.Number)]
        public long Index { get; set; }

        [PropertyInfo(2, "کد پرسنلی", true, ColumnType.Text)]
        public string PersonnelCode { get; set; }

        [PropertyInfo(3, "نام", true, ColumnType.Text)]
        public string Name { get; set; }

        [PropertyInfo(4, "تعداد روز کاری", true, ColumnType.Number)]
        public int WorkingDaysCount => ExceptionCount + CapitalCityCount + NonCapitalCityCount;


        [PropertyInfo(5, "تعداد فاکتور انبار تکسان", true, ColumnType.Number)]
        public int WarehouseTaksunInvoiceCount { get; set; }

        [PropertyInfo(6, "تعداد فاکتور انبار خوشبخت", true, ColumnType.Number)]
        public int WarehouseKhoshbakhtInvoiceCount { get; set; }

        [PropertyInfo(7, "تعداد فاکتور انبار فیروز", true, ColumnType.Number)]
        public int WarehouseFiroozInvoiceCount { get; set; }

        [PropertyInfo(8, "تعداد فاکتور انبار مکنزی", true, ColumnType.Number)]
        public int WarehouseMakenzyInvoiceCount { get; set; }

        [PropertyInfo(9, "تعداد فاکتور انبار نوشیدنی", true, ColumnType.Number)]
        public int WarehouseNooshidaniInvoiceCount { get; set; }


        [PropertyInfo(10, "مبلغ فاکتور انبار تکسان", true, ColumnType.Number)]
        public long WarehouseTaksunInvoiceAmount { get; set; }

        [PropertyInfo(11, "مبلغ فاکتور انبار خوشبخت", true, ColumnType.Number)]
        public long WarehouseKhoshbakhtInvoiceAmount { get; set; }

        [PropertyInfo(12, "مبلغ فاکتور انبار فیروز", true, ColumnType.Number)]
        public long WarehouseFiroozInvoiceAmount { get; set; }

        [PropertyInfo(13, "مبلغ فاکتور انبار مکنزی", true, ColumnType.Number)]
        public long WarehouseMakenzyInvoiceAmount { get; set; }

        [PropertyInfo(14, "مبلغ فاکتور انبار نوشیدنی", true, ColumnType.Number)]
        public long WarehouseNooshidaniInvoiceAmount { get; set; }


        [PropertyInfo(15, "تعداد روز رانندگی", true, ColumnType.Text)]
        public int DriverCount { get; set; }

        [PropertyInfo(16, "تعداد روز موزعی", true, ColumnType.Text)]
        public int DistributorCount { get; set; }

        [PropertyInfo(17, "تعداد روز راننده موزعی", true, ColumnType.Text)]
        public int DriverDistributorCount { get; set; }


        [PropertyInfo(18, "VIP", true, ColumnType.Number)]
        public int VIPCount { get; set; }

        [PropertyInfo(19, "خاص", true, ColumnType.Number)]
        public int ExceptionCount { get; set; }

        [PropertyInfo(20, "شیراز", true, ColumnType.Number)]
        public int CapitalCityCount { get; set; }

        [PropertyInfo(21, "غیر شیراز", true, ColumnType.Number)]
        public int NonCapitalCityCount { get; set; }

        [PropertyInfo(22, "انبار", true, ColumnType.Number)]
        public int AtWarehouseCount { get; set; }

        [PropertyInfo(23, "مرخصی", true, ColumnType.Number)]
        public int OffCount { get; set; }

        [PropertyInfo(24, "تعمیرگاه", true, ColumnType.Number)]
        public int AtAutoMechCount { get; set; }

        [PropertyInfo(25, "متفرقه", true, ColumnType.Number)]
        public int OtherCount { get; set; }

        [PropertyInfo(26, "غیبت", true, ColumnType.Number)]
        public int AbsentCount { get; set; }


        [PropertyInfo(27, "تعداد فاکتور موزعی", true, ColumnType.Number)]
        public int DistributorInvoiceCount { get; set; }

        [PropertyInfo(28, "مبلغ فاکتور موزعی", true, ColumnType.Number)]
        public long DistributorInvoiceAmount { get; set; }

        [PropertyInfo(29, "تعداد فاکتور رانندگی", true, ColumnType.Number)]
        public int DriverInvoiceCount { get; set; }

        [PropertyInfo(30, "مبلغ فاکتور رانندگی", true, ColumnType.Number)]
        public long DriverInvoiceAmount { get; set; }

        [PropertyInfo(31, "تعداد فاکتور راننده موزعی", true, ColumnType.Number)]
        public int DriverDistributorInvoiceCount { get; set; }

        [PropertyInfo(32, "مبلغ فاکتور راننده موزعی", true, ColumnType.Number)]
        public long DriverDistributorInvoiceAmount { get; set; }


        [PropertyInfo(33, "تعداد فاکتور مرجوعی موزعی", true, ColumnType.Number)]
        public int DistributorReturnInvoiceCount { get; set; }

        [PropertyInfo(34, "مبلغ مرجوعی موزعی", true, ColumnType.Number)]
        public long DistributorReturnInvoiceAmount { get; set; }

        [PropertyInfo(35, "تعداد فاکتور مرجوعی رانندگی", true, ColumnType.Number)]
        public int DriverReturnInvoiceCount { get; set; }

        [PropertyInfo(36, "مبلغ مرجوعی رانندگی", true, ColumnType.Number)]
        public long DriverReturnInvoiceAmount { get; set; }

        [PropertyInfo(37, "تعداد فاکتور مرجوعی راننده موزعی", true, ColumnType.Number)]
        public int DriverDistributorReturnInvoiceCount { get; set; }

        [PropertyInfo(38, "مبلغ مرجوعی راننده موزعی", true, ColumnType.Number)]
        public long DriverDistributorReturnInvoiceAmount { get; set; }


        [PropertyInfo(39, "تعداد فاکتور خالص موزعی", true, ColumnType.Number)]
        public int DistributorNetInvoiceCount => DistributorInvoiceCount - DistributorReturnInvoiceCount;

        [PropertyInfo(40, "مبلغ فاکتور خالص موزعی", true, ColumnType.Number)]
        public long DistributorNetInvoiceAmount => DistributorInvoiceAmount - DistributorReturnInvoiceAmount;

        [PropertyInfo(41, "تعداد فاکتور خالص رانندگی", true, ColumnType.Number)]
        public int DriverNetInvoiceCount => DriverInvoiceCount - DriverReturnInvoiceCount;

        [PropertyInfo(42, "مبلغ خالص رانندگی", true, ColumnType.Number)]
        public long DriverNetInvoiceAmount => DriverInvoiceAmount - DriverReturnInvoiceAmount;

        [PropertyInfo(43, "تعداد فاکتور خالص راننده موزعی", true, ColumnType.Number)]
        public int DriverDistributorNetInvoiceCount => DriverDistributorInvoiceCount - DriverDistributorReturnInvoiceCount;

        [PropertyInfo(44, "مبلغ خالص راننده موزعی", true, ColumnType.Number)]
        public long DriverDistributorNetInvoiceAmount => DriverDistributorInvoiceAmount - DriverDistributorReturnInvoiceAmount;


        [PropertyInfo(45, "تعداد فاکتور خالص", true, ColumnType.Number)]
        public long NetInvoiceCount => DistributorInvoiceCount - DistributorReturnInvoiceCount + DriverInvoiceCount - DriverReturnInvoiceCount + DriverDistributorInvoiceCount - DriverDistributorReturnInvoiceCount;

        [PropertyInfo(46, "مبلغ فاکتور خالص", true, ColumnType.Number)]
        public long NetInvoiceAmount => DistributorInvoiceAmount - DistributorReturnInvoiceAmount + DriverInvoiceAmount - DriverReturnInvoiceAmount + DriverDistributorInvoiceAmount - DriverDistributorReturnInvoiceAmount;


        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string DriverInvoiceCountFormatted => DriverInvoiceCount.ToString("N0");
        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string DriverInvoiceAmountFormatted => DriverInvoiceAmount.ToString("N0");
        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string DriverReturnInvoiceCountFormatted => DriverReturnInvoiceCount.ToString("N0");
        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string DriverReturnInvoiceAmountFormatted => DriverReturnInvoiceAmount.ToString("N0");

        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string DriverDistributorInvoiceCountFormatted => DriverDistributorInvoiceCount.ToString("N0");
        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string DriverDistributorInvoiceAmountFormatted => DriverDistributorInvoiceAmount.ToString("N0");
        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string DriverDistributorReturnInvoiceCountFormatted => DriverDistributorReturnInvoiceCount.ToString("N0");
        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string DriverDistributorReturnInvoiceAmountFormatted => DriverDistributorReturnInvoiceAmount.ToString("N0");

        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string DistributorInvoiceCountFormatted => DistributorInvoiceCount.ToString("N0");
        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string DistributorInvoiceAmountFormatted => DistributorInvoiceAmount.ToString("N0");
        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string DistributorReturnInvoiceCountFormatted => DistributorReturnInvoiceCount.ToString("N0");
        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string DistributorReturnInvoiceAmountFormatted => DistributorReturnInvoiceAmount.ToString("N0");

        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string DriverNetInvoiceCountFormatted => DriverNetInvoiceCount.ToString("N0");
        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string DriverNetInvoiceAmountFormatted => DriverNetInvoiceAmount.ToString("N0");

        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string DriverDistributorNetInvoiceCountFormatted => DriverDistributorNetInvoiceCount.ToString("N0");
        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string DriverDistributorNetInvoiceAmountFormatted => DriverDistributorNetInvoiceAmount.ToString("N0");

        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string DistributorNetInvoiceCountFormatted => DistributorNetInvoiceCount.ToString("N0");
        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string DistributorNetInvoiceAmountFormatted => DistributorNetInvoiceAmount.ToString("N0");

        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string NetInvoiceCountFormatted => NetInvoiceCount.ToString("N0");
        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string NetInvoiceAmountFormatted => NetInvoiceAmount.ToString("N0");


        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string WarehouseTaksunInvoiceAmountFormatted => WarehouseTaksunInvoiceAmount.ToString("N0");

        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string WarehouseKhoshbakhtInvoiceAmountFormatted => WarehouseKhoshbakhtInvoiceAmount.ToString("N0");

        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string WarehouseFiroozInvoiceAmountFormatted => WarehouseFiroozInvoiceAmount.ToString("N0");

        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string WarehouseMakenzyInvoiceAmountFormatted => WarehouseMakenzyInvoiceAmount.ToString("N0");

        [PropertyInfo(100, "-", false, ColumnType.Text)]
        public string WarehouseNooshidaniInvoiceAmountFormatted => WarehouseNooshidaniInvoiceAmount.ToString("N0");
    }

    private async Task OpenDialogAsync(long id)
    {
        bool? result;
        result = await _mudMessageBox.ShowAsync();

        if (result is true)
        {
            var row = await dbContext.Shipments.FindAsync(id);
            if (row is not null)
            {
                dbContext.Shipments.Remove(row);
                await dbContext.SaveChangesAsync();
            }
        }
        await LoadDataAsync(_currentMonth);
    }

    void ClearDate()
    {
        SearchString = string.Empty;
        SetMonth();
    }

    private List<T> SafeFilteredItems<T>(MudDataGrid<T> grid)
    {
        if (grid == null)
            return new List<T>();

        try
        {
            return grid.FilteredItems?.ToList() ?? new List<T>();
        }
        catch
        {
            return new List<T>();
        }
    }

    private async Task PrepareExportData()
    {
        reportToExcel = SafeFilteredItems(_mudDataGrid);
    }

    string SetMonth()
    {
        PersianCalendar persianCalendar = new();
        var num = persianCalendar.GetMonth(DateTime.Now);
        _selectedMonth = monthList[num];
        return _selectedMonth;
    }

    async Task Refresh() => await LoadDataAsync(_currentMonth);

    protected override async Task OnInitializedAsync()
    {
        _currentMonth = SetMonth();
        await base.OnInitializedAsync();
        await LoadDataAsync(_currentMonth);

        var authState = await authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        isAuthorized = user.Identity?.IsAuthenticated ?? false;
        StateHasChanged();
    }

    private string RowClassFunc(TotalReportDto element, int rowNumber)
    {
        element.Index = 1 + rowNumber + (_mudDataGrid?.CurrentPage ?? 0) * (_mudDataGrid?.RowsPerPage ?? 0);
        return string.Empty;
    }

    private Func<TotalReportDto, bool> Filter => s =>
    {
        if (string.IsNullOrWhiteSpace(SearchString))
            return true;

        var search = SearchString.Trim();

        bool ContainsIgnoreCase(string? source) =>
        source?.Contains(search, StringComparison.OrdinalIgnoreCase) ?? false;

        bool matchesSearch =
        ContainsIgnoreCase(s.Name) ||
        ContainsIgnoreCase(s.PersonnelCode);

        return matchesSearch;
    };


    private async Task OnExportRequested()
    {
        await PrepareExportData();

        var workbook = new XLWorkbook();
        var worksheet = workbook.AddWorksheet("گزارش کلی");

        var columnsdsfs = excel.SetData(reportToExcel, worksheet, 1, 2, null);

        await excel.Export(workbook);
    }
}



