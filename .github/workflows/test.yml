name: Deploy DriverDistributor

on:
  push:
    branches:
      - main
      - develop
      - staging

jobs:
  deploy:
    name: Deploy (${{ github.ref_name }})
    runs-on: self-hosted

    steps:
      # 1) Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2) Set environment variables based on branch
      - name: Set environment variables
        run: |
          BRANCH="${{ github.ref_name }}"
          if [[ "$BRANCH" == "develop" ]]; then
            echo "APP_ENV=Development" >> $GITHUB_ENV       # for build/publish config
            echo "PORT=5002" >> $GITHUB_ENV
            echo "DB_TYPE=pg" >> $GITHUB_ENV
            echo "DB_NAME=DriverDistributor_Development" >> $GITHUB_ENV
          elif [[ "$BRANCH" == "staging" ]]; then
            echo "APP_ENV=Staging" >> $GITHUB_ENV
            echo "PORT=5001" >> $GITHUB_ENV
            echo "DB_TYPE=pg" >> $GITHUB_ENV
            echo "DB_NAME=DriverDistributor_Staging" >> $GITHUB_ENV
          else
            echo "APP_ENV=Production" >> $GITHUB_ENV
            echo "PORT=5000" >> $GITHUB_ENV
            echo "DB_TYPE=pg" >> $GITHUB_ENV
            echo "DB_NAME=DriverDistributor" >> $GITHUB_ENV
          fi

          # Always run container in Production
          echo "DOTNET_ENVIRONMENT=Production" >> $GITHUB_ENV

      # 3) Compose DB connection string
      - name: Compose DB connection string
        run: |
          if [[ "$DB_TYPE" == "ss" ]]; then
            echo "DB_CONNECTION_STRING=Data Source=.,1433;Initial Catalog=${DB_NAME};User ID=sa;Password=${{ secrets.DB_PASSWORD }};Multiple Active Result Sets=True;Trust Server Certificate=True;" >> $GITHUB_ENV
          else
            echo "DB_CONNECTION_STRING=Host=10.11.11.28;Port=5432;Database=${DB_NAME};Username=postgres;Password=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
          fi
          echo "DB_CONNECTION_STRING set (hidden in logs)."

      # 4) Prepare project folder
      - name: Prepare project folder
        run: |
          mkdir -p /home/ubuntu/DriverDistributor/${APP_ENV}
          rsync -av --delete --exclude='.vs' ./ /home/ubuntu/DriverDistributor/${APP_ENV}/

      # 5) Stop old containers
      - name: Stop old containers
        run: |
          docker stop driverdistributor-${APP_ENV} 2>/dev/null || true
          docker rm driverdistributor-${APP_ENV} 2>/dev/null || true
          docker rmi driverdistributor-${APP_ENV} 2>/dev/null || true

      # 6) Ensure DB container exists
      - name: Ensure DB container
        run: |
          sudo mkdir -p /home/ubuntu/sql_backups /home/ubuntu/pg_backups
          sudo chmod -R 777 /home/ubuntu/sql_backups /home/ubuntu/pg_backups
          docker network create sqlnet 2>/dev/null || true
          docker network create pgnet 2>/dev/null || true

          if [[ "$DB_TYPE" == "ss" ]]; then
            if docker ps -a --format '{{.Names}}' | grep -w sqlserver >/dev/null; then
              docker start sqlserver
            else
              docker run -e "ACCEPT_EULA=Y" \
                         -e "SA_PASSWORD=${{ secrets.DB_PASSWORD }}" \
                         -p 1433:1433 \
                         -v mssql_data:/var/opt/mssql \
                         -v /home/ubuntu/sql_backups:/var/opt/mssql/backups \
                         --name sqlserver \
                         --network sqlnet \
                         -d mcr.microsoft.com/mssql/server:2022-latest
            fi
          else
            if docker ps -a --format '{{.Names}}' | grep -w postgres >/dev/null; then
              docker start postgres
            else
              docker run -e "POSTGRES_USER=postgres" \
                         -e "POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}" \
                         -e "POSTGRES_DB=${DB_NAME}" \
                         -p 5432:5432 \
                         -v pgdata:/var/lib/postgresql/data \
                         -v /home/ubuntu/pg_backups:/var/lib/postgresql/backups \
                         --name postgres \
                         --network pgnet \
                         -d postgres:16-alpine
            fi
          fi

      # 7) Setup QEMU
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 8) Setup Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      # 9) Prepare buildx cache
      - name: Prepare buildx local cache
        run: |
          mkdir -p /tmp/.buildx-cache
          chmod -R 777 /tmp/.buildx-cache

      # 10) Create & bootstrap buildx builder
      - name: Create & bootstrap buildx builder
        run: |
          docker buildx create --name driverdist-builder --use || true
          docker buildx inspect driverdist-builder --bootstrap

      # 11) Build image with Buildx + cache
      - name: Build image with Buildx + cache
        env:
          DOCKER_BUILDKIT: 1
        run: |
          cd /home/ubuntu/DriverDistributor/${APP_ENV}
          mkdir -p /tmp/.buildx-cache
          docker buildx build \
            --builder driverdist-builder \
            --tag driverdistributor-${APP_ENV,,} \
            --load \
            --build-arg DOTNET_ENVIRONMENT=${APP_ENV} \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache-new,mode=max \
            .
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true

      # 12) Run the built container
      - name: Run DriverDistributor container
        run: |
          docker run -d \
            --name driverdistributor-${APP_ENV,,} \
            -p ${PORT}:8080 \
            -v driverdata-${APP_ENV,,}:/app/data \
            -e "DOTNET_ENVIRONMENT=Production" \
            -e "ConnectionStrings__Default=${DB_CONNECTION_STRING}" \
            driverdistributor-${APP_ENV,,}

      # 13) Cleanup Docker resources
      - name: Clean up unused Docker resources
        if: always()
        run: |
          docker image prune -f
          docker container prune -f

      # 14) Deployment complete
      - name: Deployment complete
        run: echo "DriverDistributor ${APP_ENV} container running on port ${PORT}"
