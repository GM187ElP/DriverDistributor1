name: Deploy DriverDistributor

on:
  push:
    branches:
      - main
      - develop
      - staging

jobs:
  deploy:
    name: Deploy (${{ github.ref_name }})
    runs-on: self-hosted

    steps:
      # 1. Checkout the repo
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Set environment variables based on branch
      - name: Set environment variables
        run: |
          if [[ "${GITHUB_REF##*/}" == "develop" ]]; then
            echo ">>> Running develop environment setup"
            echo "APP_ENV=develop" >> $GITHUB_ENV
            echo "PORT=5002" >> $GITHUB_ENV
            echo "DB_TYPE=pg" >> $GITHUB_ENV
            echo "DB_NAME=DriverDistributor_Development" >> $GITHUB_ENV

          elif [[ "${GITHUB_REF##*/}" == "staging" ]]; then
            echo ">>> Running staging environment setup"
            echo "APP_ENV=staging" >> $GITHUB_ENV
            echo "PORT=5001" >> $GITHUB_ENV
            echo "DB_TYPE=pg" >> $GITHUB_ENV
            echo "DB_NAME=DriverDistributor_Staging" >> $GITHUB_ENV

          elif [[ "${GITHUB_REF##*/}" == "main" ]]; then
            echo ">>> Running production environment setup"
            echo "APP_ENV=production" >> $GITHUB_ENV
            echo "PORT=5000" >> $GITHUB_ENV
            echo "DB_TYPE=pg" >> $GITHUB_ENV
            echo "DB_NAME=DriverDistributor" >> $GITHUB_ENV
          fi

          if [[ "$DB_TYPE" == "ss" ]]; then
            echo "DB_CONNECTION_STRING=Data Source=.,1433;Initial Catalog=${DB_NAME};User ID=sa;Password=${{secrets.DB_PASSWORD}};Multiple Active Result Sets=True;Trust Server Certificate=True;" >> $GITHUB_ENV
          else
            echo "DB_CONNECTION_STRING=Host=localhost;Port=5432;Database=${DB_NAME};Username=postgres;Password=${{secrets.DB_PASSWORD}}" >> $GITHUB_ENV
          fi

      # 3. Prepare project folder
      - name: Prepare project folder
        run: |
          mkdir -p /home/ubuntu/DriverDistributor/${APP_ENV}
          rsync -av --delete --exclude='.vs' ./ /home/ubuntu/DriverDistributor/${APP_ENV}/

      # 4. Stop old DriverDistributor containers
      - name: Stop old containers
        run: |
          docker stop driverdistributor-${APP_ENV} 2>/dev/null || true
          docker rm driverdistributor-${APP_ENV} 2>/dev/null || true
          docker rmi driverdistributor-${APP_ENV} 2>/dev/null || true

      # 5. Ensure SQL Server / Postgres containers persist
      - name: Ensure DB containers
        run: |
            sudo mkdir -p /home/ubuntu/sql_backups 2>/dev/null || true
            sudo mkdir -p /home/ubuntu/pg_backups 2>/dev/null || true
            sudo chmod -R 777 /home/ubuntu/sql_backups
            sudo chmod -R 777 /home/ubuntu/pg_backups

            docker network create sqlnet 2>/dev/null || true
            docker network create pgnet 2>/dev/null || true

            if [[ "$DB_TYPE" == "ss" ]]; then
              if docker ps -a --format '{{.Names}}' | grep -w sqlserver >/dev/null; then
                  echo "Starting existing SQL Server container..."
                  docker start sqlserver
              else
                  echo "Creating new SQL Server container..."
                  docker run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=Arsalan.1461" \
                      -p 1433:1433 \
                      -v mssql_data:/var/opt/mssql \
                      -v /home/ubuntu/sql_backups:/var/opt/mssql/backups \
                      --name sqlserver \
                      --network sqlnet \
                      -d mcr.microsoft.com/mssql/server:2022-latest
              fi
            else
              if docker ps -a --format '{{.Names}}' | grep -w postgres >/dev/null; then
                  echo "Starting existing Postgres container..."
                  docker start postgres
              else
                  echo "Creating new Postgres container..."
                  docker run -e "POSTGRES_USER=postgres" \
                      -e "POSTGRES_PASSWORD=Arsalan.1461" \
                      -e "POSTGRES_DB=${DB_NAME}" \
                      -p 5432:5432 \
                      -v pgdata:/var/lib/postgresql/data \
                      -v /home/ubuntu/pg_backups:/var/lib/postgresql/backups \
                      --name postgres \
                      --network pgnet \
                      -d postgres:16-alpine

                  echo ${DB_NAME}
              fi
            fi

      # 6. Build new DriverDistributor Docker image
      - name: Build Docker image
        run: |
          cd /home/ubuntu/DriverDistributor/${APP_ENV}
          docker build -t driverdistributor-${APP_ENV} .

      # 7. Run DriverDistributor container
      - name: Run DriverDistributor container
        run: |
          docker run -d \
          --name driverdistributor-${APP_ENV} \
          -p ${PORT}:8080 \
          -v driverdata-${APP_ENV}:/app/data \
          -e DOTNET_ENVIRONMENT=${APP_ENV} \
          -e ConnectionStrings__Default="${DB_CONNECTION_STRING}" \
          driverdistributor-${APP_ENV}

      # 8. Cleanup unused Docker resources
      - name: Clean up unused Docker resources
        run: docker system prune -af

      # 9. Deployment complete
      - name: Deployment complete
        run: echo "DriverDistributor ${APP_ENV} container is up and running!"
